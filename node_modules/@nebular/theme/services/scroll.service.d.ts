import { Observable, Subject } from 'rxjs';
/**
 * Scroll position type
 */
import * as ɵngcc0 from '@angular/core';
export interface NbScrollPosition {
    /**
     * x - left
     * @type {number}
     */
    x: number;
    /**
     * y - top
     * @type {number}
     */
    y: number;
}
/**
 * Layout scroll service. Provides information about current scroll position,
 * as well as methods to update position of the scroll.
 *
 * The reason we added this service is that in Nebular there are two scroll modes:
 * - the default mode when scroll is on body
 * - and the `withScroll` mode, when scroll is removed from the body and moved to an element inside of the
 * `nb-layout` component
 */
export declare class NbLayoutScrollService {
    private scrollPositionReq$;
    private manualScroll$;
    private scroll$;
    private scrollable$;
    /**
     * Returns scroll position
     *
     * @returns {Observable<NbScrollPosition>}
     */
    getPosition(): Observable<NbScrollPosition>;
    /**
     * Sets scroll position
     *
     * @param {number} x
     * @param {number} y
     */
    scrollTo(x?: number, y?: number): void;
    /**
     * Returns a stream of scroll events
     *
     * @returns {Observable<any>}
     */
    onScroll(): Observable<any>;
    /**
     * @private
     * @returns Observable<NbScrollPosition>.
     */
    onManualScroll(): Observable<NbScrollPosition>;
    /**
     * @private
     * @returns {Subject<any>}
     */
    onGetPosition(): Subject<any>;
    onScrollableChange(): Observable<boolean>;
    /**
     * @private
     * @param {any} event
     */
    fireScrollChange(event: any): void;
    scrollable(scrollable: boolean): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbLayoutScrollService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbLayoutScrollService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsic2Nyb2xsLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbi8qKlxuICogU2Nyb2xsIHBvc2l0aW9uIHR5cGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBOYlNjcm9sbFBvc2l0aW9uIHtcbiAgICAvKipcbiAgICAgKiB4IC0gbGVmdFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgeDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIHkgLSB0b3BcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIHk6IG51bWJlcjtcbn1cbi8qKlxuICogTGF5b3V0IHNjcm9sbCBzZXJ2aWNlLiBQcm92aWRlcyBpbmZvcm1hdGlvbiBhYm91dCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbixcbiAqIGFzIHdlbGwgYXMgbWV0aG9kcyB0byB1cGRhdGUgcG9zaXRpb24gb2YgdGhlIHNjcm9sbC5cbiAqXG4gKiBUaGUgcmVhc29uIHdlIGFkZGVkIHRoaXMgc2VydmljZSBpcyB0aGF0IGluIE5lYnVsYXIgdGhlcmUgYXJlIHR3byBzY3JvbGwgbW9kZXM6XG4gKiAtIHRoZSBkZWZhdWx0IG1vZGUgd2hlbiBzY3JvbGwgaXMgb24gYm9keVxuICogLSBhbmQgdGhlIGB3aXRoU2Nyb2xsYCBtb2RlLCB3aGVuIHNjcm9sbCBpcyByZW1vdmVkIGZyb20gdGhlIGJvZHkgYW5kIG1vdmVkIHRvIGFuIGVsZW1lbnQgaW5zaWRlIG9mIHRoZVxuICogYG5iLWxheW91dGAgY29tcG9uZW50XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iTGF5b3V0U2Nyb2xsU2VydmljZSB7XG4gICAgcHJpdmF0ZSBzY3JvbGxQb3NpdGlvblJlcSQ7XG4gICAgcHJpdmF0ZSBtYW51YWxTY3JvbGwkO1xuICAgIHByaXZhdGUgc2Nyb2xsJDtcbiAgICBwcml2YXRlIHNjcm9sbGFibGUkO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxOYlNjcm9sbFBvc2l0aW9uPn1cbiAgICAgKi9cbiAgICBnZXRQb3NpdGlvbigpOiBPYnNlcnZhYmxlPE5iU2Nyb2xsUG9zaXRpb24+O1xuICAgIC8qKlxuICAgICAqIFNldHMgc2Nyb2xsIHBvc2l0aW9uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge251bWJlcn0geFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gICAgICovXG4gICAgc2Nyb2xsVG8oeD86IG51bWJlciwgeT86IG51bWJlcik6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHN0cmVhbSBvZiBzY3JvbGwgZXZlbnRzXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fVxuICAgICAqL1xuICAgIG9uU2Nyb2xsKCk6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIE9ic2VydmFibGU8TmJTY3JvbGxQb3NpdGlvbj4uXG4gICAgICovXG4gICAgb25NYW51YWxTY3JvbGwoKTogT2JzZXJ2YWJsZTxOYlNjcm9sbFBvc2l0aW9uPjtcbiAgICAvKipcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqIEByZXR1cm5zIHtTdWJqZWN0PGFueT59XG4gICAgICovXG4gICAgb25HZXRQb3NpdGlvbigpOiBTdWJqZWN0PGFueT47XG4gICAgb25TY3JvbGxhYmxlQ2hhbmdlKCk6IE9ic2VydmFibGU8Ym9vbGVhbj47XG4gICAgLyoqXG4gICAgICogQHByaXZhdGVcbiAgICAgKiBAcGFyYW0ge2FueX0gZXZlbnRcbiAgICAgKi9cbiAgICBmaXJlU2Nyb2xsQ2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIHNjcm9sbGFibGUoc2Nyb2xsYWJsZTogYm9vbGVhbik6IHZvaWQ7XG59XG4iXX0=