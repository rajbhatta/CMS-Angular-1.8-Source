import { Observable, Subject } from 'rxjs';
/**
 * Layout dimensions type
 */
import * as ɵngcc0 from '@angular/core';
export interface NbLayoutDimensions {
    /**
     * clientWidth
     * @type {number}
     */
    clientWidth: number;
    /**
     * clientHeight
     * @type {number}
     */
    clientHeight: number;
    /**
     * scrollWidth
     * @type {number}
     */
    scrollWidth: number;
    /**
     * scrollHeight
     * @type {number}
     */
    scrollHeight: number;
}
/**
 * Simple helper service to return Layout dimensions
 * Depending of current Layout scroll mode (default or `withScroll` when scroll is moved to an element
 * inside of the layout) corresponding dimensions will be returns  - of `documentElement` in first case and
 * `.scrollable-container` in the second.
 */
export declare class NbLayoutRulerService {
    private contentDimensionsReq$;
    /**
     * Content dimensions
     * @returns {Observable<NbLayoutDimensions>}
     */
    getDimensions(): Observable<NbLayoutDimensions>;
    /**
     * @private
     * @returns {Subject<any>}
     */
    onGetDimensions(): Subject<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbLayoutRulerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbLayoutRulerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXIuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJydWxlci5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuLyoqXG4gKiBMYXlvdXQgZGltZW5zaW9ucyB0eXBlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmJMYXlvdXREaW1lbnNpb25zIHtcbiAgICAvKipcbiAgICAgKiBjbGllbnRXaWR0aFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgY2xpZW50V2lkdGg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBjbGllbnRIZWlnaHRcbiAgICAgKiBAdHlwZSB7bnVtYmVyfVxuICAgICAqL1xuICAgIGNsaWVudEhlaWdodDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIHNjcm9sbFdpZHRoXG4gICAgICogQHR5cGUge251bWJlcn1cbiAgICAgKi9cbiAgICBzY3JvbGxXaWR0aDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIHNjcm9sbEhlaWdodFxuICAgICAqIEB0eXBlIHtudW1iZXJ9XG4gICAgICovXG4gICAgc2Nyb2xsSGVpZ2h0OiBudW1iZXI7XG59XG4vKipcbiAqIFNpbXBsZSBoZWxwZXIgc2VydmljZSB0byByZXR1cm4gTGF5b3V0IGRpbWVuc2lvbnNcbiAqIERlcGVuZGluZyBvZiBjdXJyZW50IExheW91dCBzY3JvbGwgbW9kZSAoZGVmYXVsdCBvciBgd2l0aFNjcm9sbGAgd2hlbiBzY3JvbGwgaXMgbW92ZWQgdG8gYW4gZWxlbWVudFxuICogaW5zaWRlIG9mIHRoZSBsYXlvdXQpIGNvcnJlc3BvbmRpbmcgZGltZW5zaW9ucyB3aWxsIGJlIHJldHVybnMgIC0gb2YgYGRvY3VtZW50RWxlbWVudGAgaW4gZmlyc3QgY2FzZSBhbmRcbiAqIGAuc2Nyb2xsYWJsZS1jb250YWluZXJgIGluIHRoZSBzZWNvbmQuXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iTGF5b3V0UnVsZXJTZXJ2aWNlIHtcbiAgICBwcml2YXRlIGNvbnRlbnREaW1lbnNpb25zUmVxJDtcbiAgICAvKipcbiAgICAgKiBDb250ZW50IGRpbWVuc2lvbnNcbiAgICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxOYkxheW91dERpbWVuc2lvbnM+fVxuICAgICAqL1xuICAgIGdldERpbWVuc2lvbnMoKTogT2JzZXJ2YWJsZTxOYkxheW91dERpbWVuc2lvbnM+O1xuICAgIC8qKlxuICAgICAqIEBwcml2YXRlXG4gICAgICogQHJldHVybnMge1N1YmplY3Q8YW55Pn1cbiAgICAgKi9cbiAgICBvbkdldERpbWVuc2lvbnMoKTogU3ViamVjdDxhbnk+O1xufVxuIl19