import { InjectionToken } from '@angular/core';
import { Observable } from 'rxjs';
/**
 * Layout direction.
 * */
import * as ɵngcc0 from '@angular/core';
export declare enum NbLayoutDirection {
    LTR = "ltr",
    RTL = "rtl"
}
/**
 * Layout direction setting injection token.
 * */
export declare const NB_LAYOUT_DIRECTION: InjectionToken<NbLayoutDirection>;
/**
 * Layout Direction Service.
 * Allows to set or get layout direction and listen to its changes
 */
export declare class NbLayoutDirectionService {
    private direction;
    private $directionChange;
    constructor(direction?: NbLayoutDirection);
    /**
     * Returns true if layout direction set to left to right.
     * @returns boolean.
     * */
    isLtr(): boolean;
    /**
     * Returns true if layout direction set to right to left.
     * @returns boolean.
     * */
    isRtl(): boolean;
    /**
     * Returns current layout direction.
     * @returns NbLayoutDirection.
     * */
    getDirection(): NbLayoutDirection;
    /**
     * Sets layout direction
     * @param {NbLayoutDirection} direction
     */
    setDirection(direction: NbLayoutDirection): void;
    /**
     * Triggered when direction was changed.
     * @returns Observable<NbLayoutDirection>.
     */
    onDirectionChange(): Observable<NbLayoutDirection>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbLayoutDirectionService, [{ optional: true; }]>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbLayoutDirectionService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0aW9uLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiZGlyZWN0aW9uLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbi8qKlxuICogTGF5b3V0IGRpcmVjdGlvbi5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBlbnVtIE5iTGF5b3V0RGlyZWN0aW9uIHtcbiAgICBMVFIgPSBcImx0clwiLFxuICAgIFJUTCA9IFwicnRsXCJcbn1cbi8qKlxuICogTGF5b3V0IGRpcmVjdGlvbiBzZXR0aW5nIGluamVjdGlvbiB0b2tlbi5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBjb25zdCBOQl9MQVlPVVRfRElSRUNUSU9OOiBJbmplY3Rpb25Ub2tlbjxOYkxheW91dERpcmVjdGlvbj47XG4vKipcbiAqIExheW91dCBEaXJlY3Rpb24gU2VydmljZS5cbiAqIEFsbG93cyB0byBzZXQgb3IgZ2V0IGxheW91dCBkaXJlY3Rpb24gYW5kIGxpc3RlbiB0byBpdHMgY2hhbmdlc1xuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkxheW91dERpcmVjdGlvblNlcnZpY2Uge1xuICAgIHByaXZhdGUgZGlyZWN0aW9uO1xuICAgIHByaXZhdGUgJGRpcmVjdGlvbkNoYW5nZTtcbiAgICBjb25zdHJ1Y3RvcihkaXJlY3Rpb24/OiBOYkxheW91dERpcmVjdGlvbik7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGxheW91dCBkaXJlY3Rpb24gc2V0IHRvIGxlZnQgdG8gcmlnaHQuXG4gICAgICogQHJldHVybnMgYm9vbGVhbi5cbiAgICAgKiAqL1xuICAgIGlzTHRyKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIGxheW91dCBkaXJlY3Rpb24gc2V0IHRvIHJpZ2h0IHRvIGxlZnQuXG4gICAgICogQHJldHVybnMgYm9vbGVhbi5cbiAgICAgKiAqL1xuICAgIGlzUnRsKCk6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBjdXJyZW50IGxheW91dCBkaXJlY3Rpb24uXG4gICAgICogQHJldHVybnMgTmJMYXlvdXREaXJlY3Rpb24uXG4gICAgICogKi9cbiAgICBnZXREaXJlY3Rpb24oKTogTmJMYXlvdXREaXJlY3Rpb247XG4gICAgLyoqXG4gICAgICogU2V0cyBsYXlvdXQgZGlyZWN0aW9uXG4gICAgICogQHBhcmFtIHtOYkxheW91dERpcmVjdGlvbn0gZGlyZWN0aW9uXG4gICAgICovXG4gICAgc2V0RGlyZWN0aW9uKGRpcmVjdGlvbjogTmJMYXlvdXREaXJlY3Rpb24pOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFRyaWdnZXJlZCB3aGVuIGRpcmVjdGlvbiB3YXMgY2hhbmdlZC5cbiAgICAgKiBAcmV0dXJucyBPYnNlcnZhYmxlPE5iTGF5b3V0RGlyZWN0aW9uPi5cbiAgICAgKi9cbiAgICBvbkRpcmVjdGlvbkNoYW5nZSgpOiBPYnNlcnZhYmxlPE5iTGF5b3V0RGlyZWN0aW9uPjtcbn1cbiJdfQ==