/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
/**
 * Media breakpoint type
 *
 * Where `name` - breakpoint name alias (e.g. xs, sm, md, etc), and width - min breakpoint width
 */
import * as ɵngcc0 from '@angular/core';
export interface NbMediaBreakpoint {
    name: string;
    width: number;
}
export declare const DEFAULT_MEDIA_BREAKPOINTS: {
    name: string;
    width: number;
}[];
/**
 * Manages media breakpoints
 *
 * Provides access to available media breakpoints to convert window width to a configured breakpoint,
 * e.g. 200px - *xs* breakpoint
 */
export declare class NbMediaBreakpointsService {
    private breakpoints;
    private breakpointsMap;
    constructor(breakpoints: any);
    /**
     * Returns a configured breakpoint by width
     * @param width number
     * @returns {Z|{name: string, width: number}}
     */
    getByWidth(width: number): NbMediaBreakpoint;
    /**
     * Returns a configured breakpoint by name
     * @param name string
     * @returns NbMediaBreakpoint
     */
    getByName(name: string): NbMediaBreakpoint;
    /**
     * Returns a list of configured breakpoints for the theme
     * @returns NbMediaBreakpoint[]
     */
    getBreakpoints(): NbMediaBreakpoint[];
    /**
     * Returns a map of configured breakpoints for the theme
     * @returns {[p: string]: number}
     */
    getBreakpointsMap(): {
        [breakpoint: string]: number;
    };
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbMediaBreakpointsService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbMediaBreakpointsService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnJlYWtwb2ludHMuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJicmVha3BvaW50cy5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbi8qKlxuICogTWVkaWEgYnJlYWtwb2ludCB0eXBlXG4gKlxuICogV2hlcmUgYG5hbWVgIC0gYnJlYWtwb2ludCBuYW1lIGFsaWFzIChlLmcuIHhzLCBzbSwgbWQsIGV0YyksIGFuZCB3aWR0aCAtIG1pbiBicmVha3BvaW50IHdpZHRoXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmJNZWRpYUJyZWFrcG9pbnQge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB3aWR0aDogbnVtYmVyO1xufVxuZXhwb3J0IGRlY2xhcmUgY29uc3QgREVGQVVMVF9NRURJQV9CUkVBS1BPSU5UUzoge1xuICAgIG5hbWU6IHN0cmluZztcbiAgICB3aWR0aDogbnVtYmVyO1xufVtdO1xuLyoqXG4gKiBNYW5hZ2VzIG1lZGlhIGJyZWFrcG9pbnRzXG4gKlxuICogUHJvdmlkZXMgYWNjZXNzIHRvIGF2YWlsYWJsZSBtZWRpYSBicmVha3BvaW50cyB0byBjb252ZXJ0IHdpbmRvdyB3aWR0aCB0byBhIGNvbmZpZ3VyZWQgYnJlYWtwb2ludCxcbiAqIGUuZy4gMjAwcHggLSAqeHMqIGJyZWFrcG9pbnRcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJNZWRpYUJyZWFrcG9pbnRzU2VydmljZSB7XG4gICAgcHJpdmF0ZSBicmVha3BvaW50cztcbiAgICBwcml2YXRlIGJyZWFrcG9pbnRzTWFwO1xuICAgIGNvbnN0cnVjdG9yKGJyZWFrcG9pbnRzOiBhbnkpO1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgYSBjb25maWd1cmVkIGJyZWFrcG9pbnQgYnkgd2lkdGhcbiAgICAgKiBAcGFyYW0gd2lkdGggbnVtYmVyXG4gICAgICogQHJldHVybnMge1p8e25hbWU6IHN0cmluZywgd2lkdGg6IG51bWJlcn19XG4gICAgICovXG4gICAgZ2V0QnlXaWR0aCh3aWR0aDogbnVtYmVyKTogTmJNZWRpYUJyZWFrcG9pbnQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGNvbmZpZ3VyZWQgYnJlYWtwb2ludCBieSBuYW1lXG4gICAgICogQHBhcmFtIG5hbWUgc3RyaW5nXG4gICAgICogQHJldHVybnMgTmJNZWRpYUJyZWFrcG9pbnRcbiAgICAgKi9cbiAgICBnZXRCeU5hbWUobmFtZTogc3RyaW5nKTogTmJNZWRpYUJyZWFrcG9pbnQ7XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIGxpc3Qgb2YgY29uZmlndXJlZCBicmVha3BvaW50cyBmb3IgdGhlIHRoZW1lXG4gICAgICogQHJldHVybnMgTmJNZWRpYUJyZWFrcG9pbnRbXVxuICAgICAqL1xuICAgIGdldEJyZWFrcG9pbnRzKCk6IE5iTWVkaWFCcmVha3BvaW50W107XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1hcCBvZiBjb25maWd1cmVkIGJyZWFrcG9pbnRzIGZvciB0aGUgdGhlbWVcbiAgICAgKiBAcmV0dXJucyB7W3A6IHN0cmluZ106IG51bWJlcn1cbiAgICAgKi9cbiAgICBnZXRCcmVha3BvaW50c01hcCgpOiB7XG4gICAgICAgIFticmVha3BvaW50OiBzdHJpbmddOiBudW1iZXI7XG4gICAgfTtcbn1cbiJdfQ==