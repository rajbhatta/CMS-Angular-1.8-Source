/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter, OnChanges, SimpleChanges, Type } from '@angular/core';
import { NbCalendarMonthModelService } from '../../services/calendar-month-model.service';
import { NbCalendarCell, NbCalendarSize, NbCalendarSizeValues } from '../../model';
import { NbBooleanInput } from '../../../helpers';
/**
 * Provides capability pick days.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbCalendarDayPickerComponent<D, T> implements OnChanges {
    private monthModel;
    /**
     * Describes which month picker have to render.
     * */
    visibleDate: D;
    /**
     * Defines if we should render previous and next months
     * in the current month view.
     * */
    boundingMonths: boolean;
    /**
     * Minimum available date for selection.
     * */
    min: D;
    /**
     * Maximum available date for selection.
     * */
    max: D;
    /**
     * Predicate that decides which cells will be disabled.
     * */
    filter: (D: any) => boolean;
    /**
     * Custom day cell component. Have to implement `NbCalendarCell` interface.
     * */
    set setCellComponent(cellComponent: Type<NbCalendarCell<D, T>>);
    cellComponent: Type<NbCalendarCell<any, any>>;
    /**
     * Size of the component.
     * Can be 'medium' which is default or 'large'.
     * */
    size: NbCalendarSize;
    static ngAcceptInputType_size: NbCalendarSizeValues;
    /**
     * Already selected date.
     * */
    date: T;
    /**
     * Determines should we show week numbers column.
     * False by default.
     * */
    get showWeekNumber(): boolean;
    set showWeekNumber(value: boolean);
    protected _showWeekNumber: boolean;
    static ngAcceptInputType_showWeekNumber: NbBooleanInput;
    /**
     * Sets symbol used as a header for week numbers column
     * */
    weekNumberSymbol: string;
    /**
     * Fires newly selected date.
     * */
    dateChange: EventEmitter<D>;
    get large(): boolean;
    /**
     * Day picker model.
     * Provides all days in current month and if boundingMonth is true some days
     * from previous and next one.
     * */
    weeks: D[][];
    constructor(monthModel: NbCalendarMonthModelService<D>);
    ngOnChanges({ visibleDate }: SimpleChanges): void;
    onSelect(day: D): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbCalendarDayPickerComponent<any, any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbCalendarDayPickerComponent<any, any>, "nb-calendar-day-picker", never, { "boundingMonths": "boundingMonths"; "size": "size"; "setCellComponent": "cellComponent"; "showWeekNumber": "showWeekNumber"; "visibleDate": "visibleDate"; "min": "min"; "max": "max"; "filter": "filter"; "date": "date"; "weekNumberSymbol": "weekNumberSymbol"; }, { "dateChange": "dateChange"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItZGF5LXBpY2tlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsiY2FsZW5kYXItZGF5LXBpY2tlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgRXZlbnRFbWl0dGVyLCBPbkNoYW5nZXMsIFNpbXBsZUNoYW5nZXMsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iQ2FsZW5kYXJNb250aE1vZGVsU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2NhbGVuZGFyLW1vbnRoLW1vZGVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmJDYWxlbmRhckNlbGwsIE5iQ2FsZW5kYXJTaXplLCBOYkNhbGVuZGFyU2l6ZVZhbHVlcyB9IGZyb20gJy4uLy4uL21vZGVsJztcbmltcG9ydCB7IE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vLi4vLi4vaGVscGVycyc7XG4vKipcbiAqIFByb3ZpZGVzIGNhcGFiaWxpdHkgcGljayBkYXlzLlxuICogKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iQ2FsZW5kYXJEYXlQaWNrZXJDb21wb25lbnQ8RCwgVD4gaW1wbGVtZW50cyBPbkNoYW5nZXMge1xuICAgIHByaXZhdGUgbW9udGhNb2RlbDtcbiAgICAvKipcbiAgICAgKiBEZXNjcmliZXMgd2hpY2ggbW9udGggcGlja2VyIGhhdmUgdG8gcmVuZGVyLlxuICAgICAqICovXG4gICAgdmlzaWJsZURhdGU6IEQ7XG4gICAgLyoqXG4gICAgICogRGVmaW5lcyBpZiB3ZSBzaG91bGQgcmVuZGVyIHByZXZpb3VzIGFuZCBuZXh0IG1vbnRoc1xuICAgICAqIGluIHRoZSBjdXJyZW50IG1vbnRoIHZpZXcuXG4gICAgICogKi9cbiAgICBib3VuZGluZ01vbnRoczogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBNaW5pbXVtIGF2YWlsYWJsZSBkYXRlIGZvciBzZWxlY3Rpb24uXG4gICAgICogKi9cbiAgICBtaW46IEQ7XG4gICAgLyoqXG4gICAgICogTWF4aW11bSBhdmFpbGFibGUgZGF0ZSBmb3Igc2VsZWN0aW9uLlxuICAgICAqICovXG4gICAgbWF4OiBEO1xuICAgIC8qKlxuICAgICAqIFByZWRpY2F0ZSB0aGF0IGRlY2lkZXMgd2hpY2ggY2VsbHMgd2lsbCBiZSBkaXNhYmxlZC5cbiAgICAgKiAqL1xuICAgIGZpbHRlcjogKEQ6IGFueSkgPT4gYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDdXN0b20gZGF5IGNlbGwgY29tcG9uZW50LiBIYXZlIHRvIGltcGxlbWVudCBgTmJDYWxlbmRhckNlbGxgIGludGVyZmFjZS5cbiAgICAgKiAqL1xuICAgIHNldCBzZXRDZWxsQ29tcG9uZW50KGNlbGxDb21wb25lbnQ6IFR5cGU8TmJDYWxlbmRhckNlbGw8RCwgVD4+KTtcbiAgICBjZWxsQ29tcG9uZW50OiBUeXBlPE5iQ2FsZW5kYXJDZWxsPGFueSwgYW55Pj47XG4gICAgLyoqXG4gICAgICogU2l6ZSBvZiB0aGUgY29tcG9uZW50LlxuICAgICAqIENhbiBiZSAnbWVkaXVtJyB3aGljaCBpcyBkZWZhdWx0IG9yICdsYXJnZScuXG4gICAgICogKi9cbiAgICBzaXplOiBOYkNhbGVuZGFyU2l6ZTtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfc2l6ZTogTmJDYWxlbmRhclNpemVWYWx1ZXM7XG4gICAgLyoqXG4gICAgICogQWxyZWFkeSBzZWxlY3RlZCBkYXRlLlxuICAgICAqICovXG4gICAgZGF0ZTogVDtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHNob3VsZCB3ZSBzaG93IHdlZWsgbnVtYmVycyBjb2x1bW4uXG4gICAgICogRmFsc2UgYnkgZGVmYXVsdC5cbiAgICAgKiAqL1xuICAgIGdldCBzaG93V2Vla051bWJlcigpOiBib29sZWFuO1xuICAgIHNldCBzaG93V2Vla051bWJlcih2YWx1ZTogYm9vbGVhbik7XG4gICAgcHJvdGVjdGVkIF9zaG93V2Vla051bWJlcjogYm9vbGVhbjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfc2hvd1dlZWtOdW1iZXI6IE5iQm9vbGVhbklucHV0O1xuICAgIC8qKlxuICAgICAqIFNldHMgc3ltYm9sIHVzZWQgYXMgYSBoZWFkZXIgZm9yIHdlZWsgbnVtYmVycyBjb2x1bW5cbiAgICAgKiAqL1xuICAgIHdlZWtOdW1iZXJTeW1ib2w6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBGaXJlcyBuZXdseSBzZWxlY3RlZCBkYXRlLlxuICAgICAqICovXG4gICAgZGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPEQ+O1xuICAgIGdldCBsYXJnZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIERheSBwaWNrZXIgbW9kZWwuXG4gICAgICogUHJvdmlkZXMgYWxsIGRheXMgaW4gY3VycmVudCBtb250aCBhbmQgaWYgYm91bmRpbmdNb250aCBpcyB0cnVlIHNvbWUgZGF5c1xuICAgICAqIGZyb20gcHJldmlvdXMgYW5kIG5leHQgb25lLlxuICAgICAqICovXG4gICAgd2Vla3M6IERbXVtdO1xuICAgIGNvbnN0cnVjdG9yKG1vbnRoTW9kZWw6IE5iQ2FsZW5kYXJNb250aE1vZGVsU2VydmljZTxEPik7XG4gICAgbmdPbkNoYW5nZXMoeyB2aXNpYmxlRGF0ZSB9OiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBvblNlbGVjdChkYXk6IEQpOiB2b2lkO1xufVxuIl19