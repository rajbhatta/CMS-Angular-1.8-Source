import { AfterViewInit, ElementRef, OnChanges, OnDestroy, OnInit, EventEmitter } from '@angular/core';
import { Subject } from 'rxjs';
import { NbComponentStatus } from '../component-status';
import { NbAdjustment, NbPosition, NbPositionValues } from '../cdk/overlay/overlay-position';
import { NbTrigger } from '../cdk/overlay/overlay-trigger';
import { NbDynamicOverlay } from '../cdk/overlay/dynamic/dynamic-overlay';
import { NbDynamicOverlayHandler } from '../cdk/overlay/dynamic/dynamic-overlay-handler';
import { NbTooltipComponent } from './tooltip.component';
import { NbIconConfig } from '../icon/icon.component';
/**
 *
 * Tooltip directive for small text/icon hints.
 *
 * ### Installation
 *
 * Import `NbTooltipModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbTooltipModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * @stacked-example(Showcase, tooltip/tooltip-showcase.component)
 *
 * Tooltip can accept a hint text and/or an icon:
 * @stacked-example(With Icon, tooltip/tooltip-with-icon.component)
 *
 * Same way as Popover, tooltip can accept placement position with `nbTooltipPlacement` property:
 * @stacked-example(Placements, tooltip/tooltip-placements.component)
 *
 * It is also possible to specify tooltip color using `nbTooltipStatus` property:
 * @stacked-example(Colored Tooltips, tooltip/tooltip-colors.component)
 *
 * Tooltip has a number of triggers which provides an ability to show and hide the component in different ways:
 *
 * - Click mode shows the component when a user clicks on the host element and hides when the user clicks
 * somewhere on the document outside the component.
 * - Hint provides capability to show the component when the user hovers over the host element
 * and hide when the user hovers out of the host.
 * - Hover works like hint mode with one exception - when the user moves mouse from host element to
 * the container element the component remains open, so that it is possible to interact with it content.
 * - Focus mode is applied when user focuses the element.
 * - Noop mode - the component won't react to the user interaction.
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbTooltipDirective implements OnInit, OnChanges, AfterViewInit, OnDestroy {
    protected hostRef: ElementRef;
    protected dynamicOverlayHandler: NbDynamicOverlayHandler;
    protected destroy$: Subject<void>;
    protected tooltipComponent: typeof NbTooltipComponent;
    protected dynamicOverlay: NbDynamicOverlay;
    protected offset: number;
    context: Object;
    /**
     * Tooltip message
     */
    content: string;
    /**
     * Position will be calculated relatively host element based on the position.
     * Can be top, right, bottom, left, start or end.
     */
    position: NbPosition;
    static ngAcceptInputType_position: NbPositionValues;
    /**
     * Container position will change automatically based on this strategy if container can't fit view port.
     * Set this property to `noop` value if you want to disable automatic adjustment.
     * Available values: `clockwise` (default), `counterclockwise`, `vertical`, `horizontal`, `noop`.
     */
    get adjustment(): NbAdjustment;
    set adjustment(value: NbAdjustment);
    protected _adjustment: NbAdjustment;
    tooltipClass: string;
    /**
     * Accepts icon name or icon config object
     * @param {string | NbIconConfig} icon name or config object
     */
    set icon(icon: string | NbIconConfig);
    /**
     *
     * @param {string} status
     */
    set status(status: NbComponentStatus);
    /**
     * Describes when the container will be shown.
     * Available options: `click`, `hover`, `hint`, `focus` and `noop`
     * */
    trigger: NbTrigger;
    nbTooltipShowStateChange: EventEmitter<{
        isShown: boolean;
    }>;
    get isShown(): boolean;
    constructor(hostRef: ElementRef, dynamicOverlayHandler: NbDynamicOverlayHandler);
    ngOnInit(): void;
    ngOnChanges(): void;
    ngAfterViewInit(): void;
    rebuild(): void;
    show(): void;
    hide(): void;
    toggle(): void;
    ngOnDestroy(): void;
    protected configureDynamicOverlay(): NbDynamicOverlayHandler;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTooltipDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTooltipDirective, "[nbTooltip]", ["nbTooltip"], { "position": "nbTooltipPlacement"; "tooltipClass": "nbTooltipClass"; "trigger": "nbTooltipTrigger"; "adjustment": "nbTooltipAdjustment"; "icon": "nbTooltipIcon"; "status": "nbTooltipStatus"; "content": "nbTooltip"; }, { "nbTooltipShowStateChange": "nbTooltipShowStateChange"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5kaXJlY3RpdmUuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5kaXJlY3RpdmUuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyVmlld0luaXQsIEVsZW1lbnRSZWYsIE9uQ2hhbmdlcywgT25EZXN0cm95LCBPbkluaXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmJDb21wb25lbnRTdGF0dXMgfSBmcm9tICcuLi9jb21wb25lbnQtc3RhdHVzJztcbmltcG9ydCB7IE5iQWRqdXN0bWVudCwgTmJQb3NpdGlvbiwgTmJQb3NpdGlvblZhbHVlcyB9IGZyb20gJy4uL2Nkay9vdmVybGF5L292ZXJsYXktcG9zaXRpb24nO1xuaW1wb3J0IHsgTmJUcmlnZ2VyIH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvb3ZlcmxheS10cmlnZ2VyJztcbmltcG9ydCB7IE5iRHluYW1pY092ZXJsYXkgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9keW5hbWljL2R5bmFtaWMtb3ZlcmxheSc7XG5pbXBvcnQgeyBOYkR5bmFtaWNPdmVybGF5SGFuZGxlciB9IGZyb20gJy4uL2Nkay9vdmVybGF5L2R5bmFtaWMvZHluYW1pYy1vdmVybGF5LWhhbmRsZXInO1xuaW1wb3J0IHsgTmJUb29sdGlwQ29tcG9uZW50IH0gZnJvbSAnLi90b29sdGlwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBOYkljb25Db25maWcgfSBmcm9tICcuLi9pY29uL2ljb24uY29tcG9uZW50Jztcbi8qKlxuICpcbiAqIFRvb2x0aXAgZGlyZWN0aXZlIGZvciBzbWFsbCB0ZXh0L2ljb24gaGludHMuXG4gKlxuICogIyMjIEluc3RhbGxhdGlvblxuICpcbiAqIEltcG9ydCBgTmJUb29sdGlwTW9kdWxlYCB0byB5b3VyIGZlYXR1cmUgbW9kdWxlLlxuICogYGBgdHNcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICAvLyAuLi5cbiAqICAgICBOYlRvb2x0aXBNb2R1bGUsXG4gKiAgIF0sXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIFBhZ2VNb2R1bGUgeyB9XG4gKiBgYGBcbiAqICMjIyBVc2FnZVxuICpcbiAqIEBzdGFja2VkLWV4YW1wbGUoU2hvd2Nhc2UsIHRvb2x0aXAvdG9vbHRpcC1zaG93Y2FzZS5jb21wb25lbnQpXG4gKlxuICogVG9vbHRpcCBjYW4gYWNjZXB0IGEgaGludCB0ZXh0IGFuZC9vciBhbiBpY29uOlxuICogQHN0YWNrZWQtZXhhbXBsZShXaXRoIEljb24sIHRvb2x0aXAvdG9vbHRpcC13aXRoLWljb24uY29tcG9uZW50KVxuICpcbiAqIFNhbWUgd2F5IGFzIFBvcG92ZXIsIHRvb2x0aXAgY2FuIGFjY2VwdCBwbGFjZW1lbnQgcG9zaXRpb24gd2l0aCBgbmJUb29sdGlwUGxhY2VtZW50YCBwcm9wZXJ0eTpcbiAqIEBzdGFja2VkLWV4YW1wbGUoUGxhY2VtZW50cywgdG9vbHRpcC90b29sdGlwLXBsYWNlbWVudHMuY29tcG9uZW50KVxuICpcbiAqIEl0IGlzIGFsc28gcG9zc2libGUgdG8gc3BlY2lmeSB0b29sdGlwIGNvbG9yIHVzaW5nIGBuYlRvb2x0aXBTdGF0dXNgIHByb3BlcnR5OlxuICogQHN0YWNrZWQtZXhhbXBsZShDb2xvcmVkIFRvb2x0aXBzLCB0b29sdGlwL3Rvb2x0aXAtY29sb3JzLmNvbXBvbmVudClcbiAqXG4gKiBUb29sdGlwIGhhcyBhIG51bWJlciBvZiB0cmlnZ2VycyB3aGljaCBwcm92aWRlcyBhbiBhYmlsaXR5IHRvIHNob3cgYW5kIGhpZGUgdGhlIGNvbXBvbmVudCBpbiBkaWZmZXJlbnQgd2F5czpcbiAqXG4gKiAtIENsaWNrIG1vZGUgc2hvd3MgdGhlIGNvbXBvbmVudCB3aGVuIGEgdXNlciBjbGlja3Mgb24gdGhlIGhvc3QgZWxlbWVudCBhbmQgaGlkZXMgd2hlbiB0aGUgdXNlciBjbGlja3NcbiAqIHNvbWV3aGVyZSBvbiB0aGUgZG9jdW1lbnQgb3V0c2lkZSB0aGUgY29tcG9uZW50LlxuICogLSBIaW50IHByb3ZpZGVzIGNhcGFiaWxpdHkgdG8gc2hvdyB0aGUgY29tcG9uZW50IHdoZW4gdGhlIHVzZXIgaG92ZXJzIG92ZXIgdGhlIGhvc3QgZWxlbWVudFxuICogYW5kIGhpZGUgd2hlbiB0aGUgdXNlciBob3ZlcnMgb3V0IG9mIHRoZSBob3N0LlxuICogLSBIb3ZlciB3b3JrcyBsaWtlIGhpbnQgbW9kZSB3aXRoIG9uZSBleGNlcHRpb24gLSB3aGVuIHRoZSB1c2VyIG1vdmVzIG1vdXNlIGZyb20gaG9zdCBlbGVtZW50IHRvXG4gKiB0aGUgY29udGFpbmVyIGVsZW1lbnQgdGhlIGNvbXBvbmVudCByZW1haW5zIG9wZW4sIHNvIHRoYXQgaXQgaXMgcG9zc2libGUgdG8gaW50ZXJhY3Qgd2l0aCBpdCBjb250ZW50LlxuICogLSBGb2N1cyBtb2RlIGlzIGFwcGxpZWQgd2hlbiB1c2VyIGZvY3VzZXMgdGhlIGVsZW1lbnQuXG4gKiAtIE5vb3AgbW9kZSAtIHRoZSBjb21wb25lbnQgd29uJ3QgcmVhY3QgdG8gdGhlIHVzZXIgaW50ZXJhY3Rpb24uXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iVG9vbHRpcERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzLCBBZnRlclZpZXdJbml0LCBPbkRlc3Ryb3kge1xuICAgIHByb3RlY3RlZCBob3N0UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBkeW5hbWljT3ZlcmxheUhhbmRsZXI6IE5iRHluYW1pY092ZXJsYXlIYW5kbGVyO1xuICAgIHByb3RlY3RlZCBkZXN0cm95JDogU3ViamVjdDx2b2lkPjtcbiAgICBwcm90ZWN0ZWQgdG9vbHRpcENvbXBvbmVudDogdHlwZW9mIE5iVG9vbHRpcENvbXBvbmVudDtcbiAgICBwcm90ZWN0ZWQgZHluYW1pY092ZXJsYXk6IE5iRHluYW1pY092ZXJsYXk7XG4gICAgcHJvdGVjdGVkIG9mZnNldDogbnVtYmVyO1xuICAgIGNvbnRleHQ6IE9iamVjdDtcbiAgICAvKipcbiAgICAgKiBUb29sdGlwIG1lc3NhZ2VcbiAgICAgKi9cbiAgICBjb250ZW50OiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogUG9zaXRpb24gd2lsbCBiZSBjYWxjdWxhdGVkIHJlbGF0aXZlbHkgaG9zdCBlbGVtZW50IGJhc2VkIG9uIHRoZSBwb3NpdGlvbi5cbiAgICAgKiBDYW4gYmUgdG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCBzdGFydCBvciBlbmQuXG4gICAgICovXG4gICAgcG9zaXRpb246IE5iUG9zaXRpb247XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX3Bvc2l0aW9uOiBOYlBvc2l0aW9uVmFsdWVzO1xuICAgIC8qKlxuICAgICAqIENvbnRhaW5lciBwb3NpdGlvbiB3aWxsIGNoYW5nZSBhdXRvbWF0aWNhbGx5IGJhc2VkIG9uIHRoaXMgc3RyYXRlZ3kgaWYgY29udGFpbmVyIGNhbid0IGZpdCB2aWV3IHBvcnQuXG4gICAgICogU2V0IHRoaXMgcHJvcGVydHkgdG8gYG5vb3BgIHZhbHVlIGlmIHlvdSB3YW50IHRvIGRpc2FibGUgYXV0b21hdGljIGFkanVzdG1lbnQuXG4gICAgICogQXZhaWxhYmxlIHZhbHVlczogYGNsb2Nrd2lzZWAgKGRlZmF1bHQpLCBgY291bnRlcmNsb2Nrd2lzZWAsIGB2ZXJ0aWNhbGAsIGBob3Jpem9udGFsYCwgYG5vb3BgLlxuICAgICAqL1xuICAgIGdldCBhZGp1c3RtZW50KCk6IE5iQWRqdXN0bWVudDtcbiAgICBzZXQgYWRqdXN0bWVudCh2YWx1ZTogTmJBZGp1c3RtZW50KTtcbiAgICBwcm90ZWN0ZWQgX2FkanVzdG1lbnQ6IE5iQWRqdXN0bWVudDtcbiAgICB0b29sdGlwQ2xhc3M6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBBY2NlcHRzIGljb24gbmFtZSBvciBpY29uIGNvbmZpZyBvYmplY3RcbiAgICAgKiBAcGFyYW0ge3N0cmluZyB8IE5iSWNvbkNvbmZpZ30gaWNvbiBuYW1lIG9yIGNvbmZpZyBvYmplY3RcbiAgICAgKi9cbiAgICBzZXQgaWNvbihpY29uOiBzdHJpbmcgfCBOYkljb25Db25maWcpO1xuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0YXR1c1xuICAgICAqL1xuICAgIHNldCBzdGF0dXMoc3RhdHVzOiBOYkNvbXBvbmVudFN0YXR1cyk7XG4gICAgLyoqXG4gICAgICogRGVzY3JpYmVzIHdoZW4gdGhlIGNvbnRhaW5lciB3aWxsIGJlIHNob3duLlxuICAgICAqIEF2YWlsYWJsZSBvcHRpb25zOiBgY2xpY2tgLCBgaG92ZXJgLCBgaGludGAsIGBmb2N1c2AgYW5kIGBub29wYFxuICAgICAqICovXG4gICAgdHJpZ2dlcjogTmJUcmlnZ2VyO1xuICAgIG5iVG9vbHRpcFNob3dTdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgaXNTaG93bjogYm9vbGVhbjtcbiAgICB9PjtcbiAgICBnZXQgaXNTaG93bigpOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGhvc3RSZWY6IEVsZW1lbnRSZWYsIGR5bmFtaWNPdmVybGF5SGFuZGxlcjogTmJEeW5hbWljT3ZlcmxheUhhbmRsZXIpO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICByZWJ1aWxkKCk6IHZvaWQ7XG4gICAgc2hvdygpOiB2b2lkO1xuICAgIGhpZGUoKTogdm9pZDtcbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjb25maWd1cmVEeW5hbWljT3ZlcmxheSgpOiBOYkR5bmFtaWNPdmVybGF5SGFuZGxlcjtcbn1cbiJdfQ==