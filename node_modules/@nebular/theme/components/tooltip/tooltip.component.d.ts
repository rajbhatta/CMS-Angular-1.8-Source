import { NbComponentStatus } from '../component-status';
import { NbRenderableContainer } from '../cdk/overlay/overlay-container';
import { NbPosition } from '../cdk/overlay/overlay-position';
import { NbIconConfig } from '../icon/icon.component';
/**
 * Tooltip container.
 * Renders provided tooltip inside.
 *
 * @styles
 *
 * tooltip-background-color:
 * tooltip-border-color:
 * tooltip-border-style:
 * tooltip-border-width:
 * tooltip-border-radius:
 * tooltip-padding:
 * tooltip-text-color:
 * tooltip-text-font-family:
 * tooltip-text-font-size:
 * tooltip-text-font-weight:
 * tooltip-text-line-height:
 * tooltip-icon-height:
 * tooltip-icon-width:
 * tooltip-max-width:
 * tooltip-basic-background-color:
 * tooltip-basic-border-color:
 * tooltip-basic-text-color:
 * tooltip-primary-background-color:
 * tooltip-primary-border-color:
 * tooltip-primary-text-color:
 * tooltip-info-background-color:
 * tooltip-info-border-color:
 * tooltip-info-text-color:
 * tooltip-success-background-color:
 * tooltip-success-border-color:
 * tooltip-success-text-color:
 * tooltip-warning-background-color:
 * tooltip-warning-border-color:
 * tooltip-warning-text-color:
 * tooltip-danger-background-color:
 * tooltip-danger-border-color:
 * tooltip-danger-text-color:
 * tooltip-control-background-color:
 * tooltip-control-border-color:
 * tooltip-control-text-color:
 * tooltip-shadow:
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbTooltipComponent implements NbRenderableContainer {
    content: string;
    /**
     * Popover position relatively host element.
     * */
    position: NbPosition;
    get binding(): string;
    get show(): boolean;
    context: {
        icon?: string | NbIconConfig;
        status?: NbComponentStatus;
    };
    get statusClass(): string;
    /**
     * The method is empty since we don't need to do anything additionally
     * render is handled by change detection
     */
    renderContent(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTooltipComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbTooltipComponent, "nb-tooltip", never, { "position": "position"; "context": "context"; "content": "content"; }, {}, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidG9vbHRpcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsidG9vbHRpcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOYkNvbXBvbmVudFN0YXR1cyB9IGZyb20gJy4uL2NvbXBvbmVudC1zdGF0dXMnO1xuaW1wb3J0IHsgTmJSZW5kZXJhYmxlQ29udGFpbmVyIH0gZnJvbSAnLi4vY2RrL292ZXJsYXkvb3ZlcmxheS1jb250YWluZXInO1xuaW1wb3J0IHsgTmJQb3NpdGlvbiB9IGZyb20gJy4uL2Nkay9vdmVybGF5L292ZXJsYXktcG9zaXRpb24nO1xuaW1wb3J0IHsgTmJJY29uQ29uZmlnIH0gZnJvbSAnLi4vaWNvbi9pY29uLmNvbXBvbmVudCc7XG4vKipcbiAqIFRvb2x0aXAgY29udGFpbmVyLlxuICogUmVuZGVycyBwcm92aWRlZCB0b29sdGlwIGluc2lkZS5cbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogdG9vbHRpcC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogdG9vbHRpcC1ib3JkZXItY29sb3I6XG4gKiB0b29sdGlwLWJvcmRlci1zdHlsZTpcbiAqIHRvb2x0aXAtYm9yZGVyLXdpZHRoOlxuICogdG9vbHRpcC1ib3JkZXItcmFkaXVzOlxuICogdG9vbHRpcC1wYWRkaW5nOlxuICogdG9vbHRpcC10ZXh0LWNvbG9yOlxuICogdG9vbHRpcC10ZXh0LWZvbnQtZmFtaWx5OlxuICogdG9vbHRpcC10ZXh0LWZvbnQtc2l6ZTpcbiAqIHRvb2x0aXAtdGV4dC1mb250LXdlaWdodDpcbiAqIHRvb2x0aXAtdGV4dC1saW5lLWhlaWdodDpcbiAqIHRvb2x0aXAtaWNvbi1oZWlnaHQ6XG4gKiB0b29sdGlwLWljb24td2lkdGg6XG4gKiB0b29sdGlwLW1heC13aWR0aDpcbiAqIHRvb2x0aXAtYmFzaWMtYmFja2dyb3VuZC1jb2xvcjpcbiAqIHRvb2x0aXAtYmFzaWMtYm9yZGVyLWNvbG9yOlxuICogdG9vbHRpcC1iYXNpYy10ZXh0LWNvbG9yOlxuICogdG9vbHRpcC1wcmltYXJ5LWJhY2tncm91bmQtY29sb3I6XG4gKiB0b29sdGlwLXByaW1hcnktYm9yZGVyLWNvbG9yOlxuICogdG9vbHRpcC1wcmltYXJ5LXRleHQtY29sb3I6XG4gKiB0b29sdGlwLWluZm8tYmFja2dyb3VuZC1jb2xvcjpcbiAqIHRvb2x0aXAtaW5mby1ib3JkZXItY29sb3I6XG4gKiB0b29sdGlwLWluZm8tdGV4dC1jb2xvcjpcbiAqIHRvb2x0aXAtc3VjY2Vzcy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogdG9vbHRpcC1zdWNjZXNzLWJvcmRlci1jb2xvcjpcbiAqIHRvb2x0aXAtc3VjY2Vzcy10ZXh0LWNvbG9yOlxuICogdG9vbHRpcC13YXJuaW5nLWJhY2tncm91bmQtY29sb3I6XG4gKiB0b29sdGlwLXdhcm5pbmctYm9yZGVyLWNvbG9yOlxuICogdG9vbHRpcC13YXJuaW5nLXRleHQtY29sb3I6XG4gKiB0b29sdGlwLWRhbmdlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogdG9vbHRpcC1kYW5nZXItYm9yZGVyLWNvbG9yOlxuICogdG9vbHRpcC1kYW5nZXItdGV4dC1jb2xvcjpcbiAqIHRvb2x0aXAtY29udHJvbC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogdG9vbHRpcC1jb250cm9sLWJvcmRlci1jb2xvcjpcbiAqIHRvb2x0aXAtY29udHJvbC10ZXh0LWNvbG9yOlxuICogdG9vbHRpcC1zaGFkb3c6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iVG9vbHRpcENvbXBvbmVudCBpbXBsZW1lbnRzIE5iUmVuZGVyYWJsZUNvbnRhaW5lciB7XG4gICAgY29udGVudDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFBvcG92ZXIgcG9zaXRpb24gcmVsYXRpdmVseSBob3N0IGVsZW1lbnQuXG4gICAgICogKi9cbiAgICBwb3NpdGlvbjogTmJQb3NpdGlvbjtcbiAgICBnZXQgYmluZGluZygpOiBzdHJpbmc7XG4gICAgZ2V0IHNob3coKTogYm9vbGVhbjtcbiAgICBjb250ZXh0OiB7XG4gICAgICAgIGljb24/OiBzdHJpbmcgfCBOYkljb25Db25maWc7XG4gICAgICAgIHN0YXR1cz86IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIH07XG4gICAgZ2V0IHN0YXR1c0NsYXNzKCk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBUaGUgbWV0aG9kIGlzIGVtcHR5IHNpbmNlIHdlIGRvbid0IG5lZWQgdG8gZG8gYW55dGhpbmcgYWRkaXRpb25hbGx5XG4gICAgICogcmVuZGVyIGlzIGhhbmRsZWQgYnkgY2hhbmdlIGRldGVjdGlvblxuICAgICAqL1xuICAgIHJlbmRlckNvbnRlbnQoKTogdm9pZDtcbn1cbiJdfQ==