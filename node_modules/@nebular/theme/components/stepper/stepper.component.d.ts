/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { QueryList, TemplateRef } from '@angular/core';
import { NbBooleanInput } from '../helpers';
import { NbStepComponent } from './step.component';
import * as ɵngcc0 from '@angular/core';
export declare type NbStepperOrientation = 'vertical' | 'horizontal';
/**
 * Stepper component
 *
 * @stacked-example(Showcase, stepper/stepper-showcase.component)
 *
 * ### Installation
 *
 * Import `NbStepperModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbStepperModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * If step label is string you can pass it as `label` attribute. Otherwise ng-template should be used:
 * ```html
 * // ...
 * <nb-stepper orientation="horizontal">
 *   <nb-step label="step number one">
 *       // ... step content here
 *   </nb-step>
 *   <nb-step label="stepLabel">
 *       <ng-template #stepLabel>
 *           <div>
 *               step number two
 *           </div>
 *       </ng-template>
 *       // ... step content here
 *   </nb-step>
 * </nb-stepper>
 * ```
 *
 * When linear mode enabled user can't move forward unless current step is complete.
 * @stacked-example(Linear, stepper/stepper-linear.component)
 *
 * Specify `[stepControl]="form"` and stepper allow go to the next step only if form is valid.
 * You can disable it via `linear` mode setting.
 * ```html
 * // ...
 * <nb-stepper  orientation="horizontal">
 *   <nb-step label="step number one" [stepControl]="form">
 *     <form [formGroup]="form">
 *       // ...
 *     </form>
 *   </nb-step>
 *    // ...
 * </nb-stepper>
 * ```
 *
 * @stacked-example(Validation, stepper/stepper-validation.component)
 *
 * Stepper component has two layout options - `vertical` & `horizontal`
 * @stacked-example(Vertical, stepper/stepper-vertical.component)
 *
 * `disableStepNavigation` disables navigation by clicking on steps, so user can navigate only using
 * 'nbStepperPrevious' and 'nbStepperNext' buttons.
 * @stacked-example(Disabled steps navigation, stepper/stepper-disabled-step-nav.component)
 *
 * @styles
 *
 * stepper-step-text-color:
 * stepper-step-text-font-family:
 * stepper-step-text-font-size:
 * stepper-step-text-font-weight:
 * stepper-step-text-line-height:
 * stepper-step-active-text-color:
 * stepper-step-completed-text-color:
 * stepper-step-index-border-color:
 * stepper-step-index-border-style:
 * stepper-step-index-border-width:
 * stepper-step-index-border-radius:
 * stepper-step-index-width:
 * stepper-step-index-active-border-color:
 * stepper-step-index-completed-background-color:
 * stepper-step-index-completed-border-color:
 * stepper-step-index-completed-text-color:
 * stepper-connector-background-color:
 * stepper-connector-completed-background-color:
 * stepper-horizontal-connector-margin:
 * stepper-vertical-connector-margin:
 * stepper-step-content-padding:
 */
export declare class NbStepperComponent {
    /**
     * Selected step index
     */
    get selectedIndex(): number;
    set selectedIndex(index: number);
    protected _selectedIndex: number;
    /**
     * Disables navigation by clicking on steps. False by default
     * @param {boolean} value
     */
    set disableStepNavigation(value: boolean);
    get disableStepNavigation(): boolean;
    protected _disableStepNavigation: boolean;
    static ngAcceptInputType_disableStepNavigation: NbBooleanInput;
    /**
     * Selected step component
     */
    get selected(): NbStepComponent;
    set selected(step: NbStepComponent);
    /**
     * Stepper orientation - `horizontal`|`vertical`
     */
    orientation: NbStepperOrientation;
    /**
     * Allow moving forward only if the current step is complete
     * @default true
     */
    set linear(value: boolean);
    get linear(): boolean;
    protected _linear: boolean;
    static ngAcceptInputType_linear: NbBooleanInput;
    get vertical(): boolean;
    get horizontal(): boolean;
    steps: QueryList<NbStepComponent>;
    /**
     * Navigate to next step
     * */
    next(): void;
    /**
     * Navigate to previous step
     * */
    previous(): void;
    /**
     * Reset stepper and stepControls to initial state
     * */
    reset(): void;
    isStepSelected(step: NbStepComponent): boolean;
    getStepTemplate(step: NbStepComponent): TemplateRef<any> | null;
    protected isStepValid(index: number): boolean;
    protected canBeSelected(indexToCheck: number): boolean;
    protected markCurrentStepInteracted(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbStepperComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbStepperComponent, "nb-stepper", never, { "orientation": "orientation"; "selectedIndex": "selectedIndex"; "disableStepNavigation": "disableStepNavigation"; "selected": "selected"; "linear": "linear"; }, {}, ["steps"], ["nb-step"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RlcHBlci5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgUXVlcnlMaXN0LCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJCb29sZWFuSW5wdXQgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB7IE5iU3RlcENvbXBvbmVudCB9IGZyb20gJy4vc3RlcC5jb21wb25lbnQnO1xuZXhwb3J0IGRlY2xhcmUgdHlwZSBOYlN0ZXBwZXJPcmllbnRhdGlvbiA9ICd2ZXJ0aWNhbCcgfCAnaG9yaXpvbnRhbCc7XG4vKipcbiAqIFN0ZXBwZXIgY29tcG9uZW50XG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShTaG93Y2FzZSwgc3RlcHBlci9zdGVwcGVyLXNob3djYXNlLmNvbXBvbmVudClcbiAqXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYlN0ZXBwZXJNb2R1bGVgIHRvIHlvdXIgZmVhdHVyZSBtb2R1bGUuXG4gKiBgYGB0c1xuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC8vIC4uLlxuICogICAgIE5iU3RlcHBlck1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgUGFnZU1vZHVsZSB7IH1cbiAqIGBgYFxuICogIyMjIFVzYWdlXG4gKlxuICogSWYgc3RlcCBsYWJlbCBpcyBzdHJpbmcgeW91IGNhbiBwYXNzIGl0IGFzIGBsYWJlbGAgYXR0cmlidXRlLiBPdGhlcndpc2UgbmctdGVtcGxhdGUgc2hvdWxkIGJlIHVzZWQ6XG4gKiBgYGBodG1sXG4gKiAvLyAuLi5cbiAqIDxuYi1zdGVwcGVyIG9yaWVudGF0aW9uPVwiaG9yaXpvbnRhbFwiPlxuICogICA8bmItc3RlcCBsYWJlbD1cInN0ZXAgbnVtYmVyIG9uZVwiPlxuICogICAgICAgLy8gLi4uIHN0ZXAgY29udGVudCBoZXJlXG4gKiAgIDwvbmItc3RlcD5cbiAqICAgPG5iLXN0ZXAgbGFiZWw9XCJzdGVwTGFiZWxcIj5cbiAqICAgICAgIDxuZy10ZW1wbGF0ZSAjc3RlcExhYmVsPlxuICogICAgICAgICAgIDxkaXY+XG4gKiAgICAgICAgICAgICAgIHN0ZXAgbnVtYmVyIHR3b1xuICogICAgICAgICAgIDwvZGl2PlxuICogICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAqICAgICAgIC8vIC4uLiBzdGVwIGNvbnRlbnQgaGVyZVxuICogICA8L25iLXN0ZXA+XG4gKiA8L25iLXN0ZXBwZXI+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIGxpbmVhciBtb2RlIGVuYWJsZWQgdXNlciBjYW4ndCBtb3ZlIGZvcndhcmQgdW5sZXNzIGN1cnJlbnQgc3RlcCBpcyBjb21wbGV0ZS5cbiAqIEBzdGFja2VkLWV4YW1wbGUoTGluZWFyLCBzdGVwcGVyL3N0ZXBwZXItbGluZWFyLmNvbXBvbmVudClcbiAqXG4gKiBTcGVjaWZ5IGBbc3RlcENvbnRyb2xdPVwiZm9ybVwiYCBhbmQgc3RlcHBlciBhbGxvdyBnbyB0byB0aGUgbmV4dCBzdGVwIG9ubHkgaWYgZm9ybSBpcyB2YWxpZC5cbiAqIFlvdSBjYW4gZGlzYWJsZSBpdCB2aWEgYGxpbmVhcmAgbW9kZSBzZXR0aW5nLlxuICogYGBgaHRtbFxuICogLy8gLi4uXG4gKiA8bmItc3RlcHBlciAgb3JpZW50YXRpb249XCJob3Jpem9udGFsXCI+XG4gKiAgIDxuYi1zdGVwIGxhYmVsPVwic3RlcCBudW1iZXIgb25lXCIgW3N0ZXBDb250cm9sXT1cImZvcm1cIj5cbiAqICAgICA8Zm9ybSBbZm9ybUdyb3VwXT1cImZvcm1cIj5cbiAqICAgICAgIC8vIC4uLlxuICogICAgIDwvZm9ybT5cbiAqICAgPC9uYi1zdGVwPlxuICogICAgLy8gLi4uXG4gKiA8L25iLXN0ZXBwZXI+XG4gKiBgYGBcbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKFZhbGlkYXRpb24sIHN0ZXBwZXIvc3RlcHBlci12YWxpZGF0aW9uLmNvbXBvbmVudClcbiAqXG4gKiBTdGVwcGVyIGNvbXBvbmVudCBoYXMgdHdvIGxheW91dCBvcHRpb25zIC0gYHZlcnRpY2FsYCAmIGBob3Jpem9udGFsYFxuICogQHN0YWNrZWQtZXhhbXBsZShWZXJ0aWNhbCwgc3RlcHBlci9zdGVwcGVyLXZlcnRpY2FsLmNvbXBvbmVudClcbiAqXG4gKiBgZGlzYWJsZVN0ZXBOYXZpZ2F0aW9uYCBkaXNhYmxlcyBuYXZpZ2F0aW9uIGJ5IGNsaWNraW5nIG9uIHN0ZXBzLCBzbyB1c2VyIGNhbiBuYXZpZ2F0ZSBvbmx5IHVzaW5nXG4gKiAnbmJTdGVwcGVyUHJldmlvdXMnIGFuZCAnbmJTdGVwcGVyTmV4dCcgYnV0dG9ucy5cbiAqIEBzdGFja2VkLWV4YW1wbGUoRGlzYWJsZWQgc3RlcHMgbmF2aWdhdGlvbiwgc3RlcHBlci9zdGVwcGVyLWRpc2FibGVkLXN0ZXAtbmF2LmNvbXBvbmVudClcbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogc3RlcHBlci1zdGVwLXRleHQtY29sb3I6XG4gKiBzdGVwcGVyLXN0ZXAtdGV4dC1mb250LWZhbWlseTpcbiAqIHN0ZXBwZXItc3RlcC10ZXh0LWZvbnQtc2l6ZTpcbiAqIHN0ZXBwZXItc3RlcC10ZXh0LWZvbnQtd2VpZ2h0OlxuICogc3RlcHBlci1zdGVwLXRleHQtbGluZS1oZWlnaHQ6XG4gKiBzdGVwcGVyLXN0ZXAtYWN0aXZlLXRleHQtY29sb3I6XG4gKiBzdGVwcGVyLXN0ZXAtY29tcGxldGVkLXRleHQtY29sb3I6XG4gKiBzdGVwcGVyLXN0ZXAtaW5kZXgtYm9yZGVyLWNvbG9yOlxuICogc3RlcHBlci1zdGVwLWluZGV4LWJvcmRlci1zdHlsZTpcbiAqIHN0ZXBwZXItc3RlcC1pbmRleC1ib3JkZXItd2lkdGg6XG4gKiBzdGVwcGVyLXN0ZXAtaW5kZXgtYm9yZGVyLXJhZGl1czpcbiAqIHN0ZXBwZXItc3RlcC1pbmRleC13aWR0aDpcbiAqIHN0ZXBwZXItc3RlcC1pbmRleC1hY3RpdmUtYm9yZGVyLWNvbG9yOlxuICogc3RlcHBlci1zdGVwLWluZGV4LWNvbXBsZXRlZC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogc3RlcHBlci1zdGVwLWluZGV4LWNvbXBsZXRlZC1ib3JkZXItY29sb3I6XG4gKiBzdGVwcGVyLXN0ZXAtaW5kZXgtY29tcGxldGVkLXRleHQtY29sb3I6XG4gKiBzdGVwcGVyLWNvbm5lY3Rvci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogc3RlcHBlci1jb25uZWN0b3ItY29tcGxldGVkLWJhY2tncm91bmQtY29sb3I6XG4gKiBzdGVwcGVyLWhvcml6b250YWwtY29ubmVjdG9yLW1hcmdpbjpcbiAqIHN0ZXBwZXItdmVydGljYWwtY29ubmVjdG9yLW1hcmdpbjpcbiAqIHN0ZXBwZXItc3RlcC1jb250ZW50LXBhZGRpbmc6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iU3RlcHBlckNvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogU2VsZWN0ZWQgc3RlcCBpbmRleFxuICAgICAqL1xuICAgIGdldCBzZWxlY3RlZEluZGV4KCk6IG51bWJlcjtcbiAgICBzZXQgc2VsZWN0ZWRJbmRleChpbmRleDogbnVtYmVyKTtcbiAgICBwcm90ZWN0ZWQgX3NlbGVjdGVkSW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBEaXNhYmxlcyBuYXZpZ2F0aW9uIGJ5IGNsaWNraW5nIG9uIHN0ZXBzLiBGYWxzZSBieSBkZWZhdWx0XG4gICAgICogQHBhcmFtIHtib29sZWFufSB2YWx1ZVxuICAgICAqL1xuICAgIHNldCBkaXNhYmxlU3RlcE5hdmlnYXRpb24odmFsdWU6IGJvb2xlYW4pO1xuICAgIGdldCBkaXNhYmxlU3RlcE5hdmlnYXRpb24oKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgX2Rpc2FibGVTdGVwTmF2aWdhdGlvbjogYm9vbGVhbjtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZGlzYWJsZVN0ZXBOYXZpZ2F0aW9uOiBOYkJvb2xlYW5JbnB1dDtcbiAgICAvKipcbiAgICAgKiBTZWxlY3RlZCBzdGVwIGNvbXBvbmVudFxuICAgICAqL1xuICAgIGdldCBzZWxlY3RlZCgpOiBOYlN0ZXBDb21wb25lbnQ7XG4gICAgc2V0IHNlbGVjdGVkKHN0ZXA6IE5iU3RlcENvbXBvbmVudCk7XG4gICAgLyoqXG4gICAgICogU3RlcHBlciBvcmllbnRhdGlvbiAtIGBob3Jpem9udGFsYHxgdmVydGljYWxgXG4gICAgICovXG4gICAgb3JpZW50YXRpb246IE5iU3RlcHBlck9yaWVudGF0aW9uO1xuICAgIC8qKlxuICAgICAqIEFsbG93IG1vdmluZyBmb3J3YXJkIG9ubHkgaWYgdGhlIGN1cnJlbnQgc3RlcCBpcyBjb21wbGV0ZVxuICAgICAqIEBkZWZhdWx0IHRydWVcbiAgICAgKi9cbiAgICBzZXQgbGluZWFyKHZhbHVlOiBib29sZWFuKTtcbiAgICBnZXQgbGluZWFyKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIF9saW5lYXI6IGJvb2xlYW47XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2xpbmVhcjogTmJCb29sZWFuSW5wdXQ7XG4gICAgZ2V0IHZlcnRpY2FsKCk6IGJvb2xlYW47XG4gICAgZ2V0IGhvcml6b250YWwoKTogYm9vbGVhbjtcbiAgICBzdGVwczogUXVlcnlMaXN0PE5iU3RlcENvbXBvbmVudD47XG4gICAgLyoqXG4gICAgICogTmF2aWdhdGUgdG8gbmV4dCBzdGVwXG4gICAgICogKi9cbiAgICBuZXh0KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogTmF2aWdhdGUgdG8gcHJldmlvdXMgc3RlcFxuICAgICAqICovXG4gICAgcHJldmlvdXMoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXNldCBzdGVwcGVyIGFuZCBzdGVwQ29udHJvbHMgdG8gaW5pdGlhbCBzdGF0ZVxuICAgICAqICovXG4gICAgcmVzZXQoKTogdm9pZDtcbiAgICBpc1N0ZXBTZWxlY3RlZChzdGVwOiBOYlN0ZXBDb21wb25lbnQpOiBib29sZWFuO1xuICAgIGdldFN0ZXBUZW1wbGF0ZShzdGVwOiBOYlN0ZXBDb21wb25lbnQpOiBUZW1wbGF0ZVJlZjxhbnk+IHwgbnVsbDtcbiAgICBwcm90ZWN0ZWQgaXNTdGVwVmFsaWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGNhbkJlU2VsZWN0ZWQoaW5kZXhUb0NoZWNrOiBudW1iZXIpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBtYXJrQ3VycmVudFN0ZXBJbnRlcmFjdGVkKCk6IHZvaWQ7XG59XG4iXX0=