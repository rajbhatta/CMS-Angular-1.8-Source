import { TemplateRef } from '@angular/core';
import { NbStepperComponent } from './stepper.component';
import { NbBooleanInput } from '../helpers';
/**
 * Component intended to be used within  the `<nb-stepper>` component.
 * Container for a step
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbStepComponent {
    protected stepper: NbStepperComponent;
    /**
     * Step content
     *
     * @type {TemplateRef}
     */
    content: TemplateRef<any>;
    /**
     * Top level abstract control of the step
     */
    stepControl?: {
        valid: boolean | null;
        reset: () => void;
    };
    /**
     * Step label
     *
     * @type {string|TemplateRef<any>}
     */
    label: string | TemplateRef<any>;
    /**
     * Whether step will be displayed in wizard
     *
     * @type {boolean}
     */
    get hidden(): boolean;
    set hidden(value: boolean);
    protected _hidden: boolean;
    static ngAcceptInputType_hidden: NbBooleanInput;
    /**
     * Check that label is a TemplateRef.
     *
     * @return boolean
     * */
    get isLabelTemplate(): boolean;
    /**
     * Whether step is marked as completed.
     *
     * @type {boolean}
     */
    get completed(): boolean;
    set completed(value: boolean);
    protected _completed: boolean;
    static ngAcceptInputType_completed: NbBooleanInput;
    protected get isCompleted(): boolean;
    interacted: boolean;
    constructor(stepper: any);
    /**
     * Mark step as selected
     * */
    select(): void;
    /**
     * Reset step and stepControl state
     * */
    reset(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbStepComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbStepComponent, "nb-step", never, { "hidden": "hidden"; "completed": "completed"; "stepControl": "stepControl"; "label": "label"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsic3RlcC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFRlbXBsYXRlUmVmIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYlN0ZXBwZXJDb21wb25lbnQgfSBmcm9tICcuL3N0ZXBwZXIuY29tcG9uZW50JztcbmltcG9ydCB7IE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG4vKipcbiAqIENvbXBvbmVudCBpbnRlbmRlZCB0byBiZSB1c2VkIHdpdGhpbiAgdGhlIGA8bmItc3RlcHBlcj5gIGNvbXBvbmVudC5cbiAqIENvbnRhaW5lciBmb3IgYSBzdGVwXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iU3RlcENvbXBvbmVudCB7XG4gICAgcHJvdGVjdGVkIHN0ZXBwZXI6IE5iU3RlcHBlckNvbXBvbmVudDtcbiAgICAvKipcbiAgICAgKiBTdGVwIGNvbnRlbnRcbiAgICAgKlxuICAgICAqIEB0eXBlIHtUZW1wbGF0ZVJlZn1cbiAgICAgKi9cbiAgICBjb250ZW50OiBUZW1wbGF0ZVJlZjxhbnk+O1xuICAgIC8qKlxuICAgICAqIFRvcCBsZXZlbCBhYnN0cmFjdCBjb250cm9sIG9mIHRoZSBzdGVwXG4gICAgICovXG4gICAgc3RlcENvbnRyb2w/OiB7XG4gICAgICAgIHZhbGlkOiBib29sZWFuIHwgbnVsbDtcbiAgICAgICAgcmVzZXQ6ICgpID0+IHZvaWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdGVwIGxhYmVsXG4gICAgICpcbiAgICAgKiBAdHlwZSB7c3RyaW5nfFRlbXBsYXRlUmVmPGFueT59XG4gICAgICovXG4gICAgbGFiZWw6IHN0cmluZyB8IFRlbXBsYXRlUmVmPGFueT47XG4gICAgLyoqXG4gICAgICogV2hldGhlciBzdGVwIHdpbGwgYmUgZGlzcGxheWVkIGluIHdpemFyZFxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IGhpZGRlbigpOiBib29sZWFuO1xuICAgIHNldCBoaWRkZW4odmFsdWU6IGJvb2xlYW4pO1xuICAgIHByb3RlY3RlZCBfaGlkZGVuOiBib29sZWFuO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9oaWRkZW46IE5iQm9vbGVhbklucHV0O1xuICAgIC8qKlxuICAgICAqIENoZWNrIHRoYXQgbGFiZWwgaXMgYSBUZW1wbGF0ZVJlZi5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gYm9vbGVhblxuICAgICAqICovXG4gICAgZ2V0IGlzTGFiZWxUZW1wbGF0ZSgpOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgc3RlcCBpcyBtYXJrZWQgYXMgY29tcGxldGVkLlxuICAgICAqXG4gICAgICogQHR5cGUge2Jvb2xlYW59XG4gICAgICovXG4gICAgZ2V0IGNvbXBsZXRlZCgpOiBib29sZWFuO1xuICAgIHNldCBjb21wbGV0ZWQodmFsdWU6IGJvb2xlYW4pO1xuICAgIHByb3RlY3RlZCBfY29tcGxldGVkOiBib29sZWFuO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9jb21wbGV0ZWQ6IE5iQm9vbGVhbklucHV0O1xuICAgIHByb3RlY3RlZCBnZXQgaXNDb21wbGV0ZWQoKTogYm9vbGVhbjtcbiAgICBpbnRlcmFjdGVkOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKHN0ZXBwZXI6IGFueSk7XG4gICAgLyoqXG4gICAgICogTWFyayBzdGVwIGFzIHNlbGVjdGVkXG4gICAgICogKi9cbiAgICBzZWxlY3QoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBSZXNldCBzdGVwIGFuZCBzdGVwQ29udHJvbCBzdGF0ZVxuICAgICAqICovXG4gICAgcmVzZXQoKTogdm9pZDtcbn1cbiJdfQ==