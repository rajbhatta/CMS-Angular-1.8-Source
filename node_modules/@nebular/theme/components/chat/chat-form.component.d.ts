/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ChangeDetectorRef, EventEmitter } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { NbComponentStatus } from '../component-status';
/**
 * Chat form component.
 *
 * Show a message form with a send message button.
 *
 * ```ts
 * <nb-chat-form showButton="true" buttonIcon="nb-send">
 * </nb-chat-form>
 * ```
 *
 * When `[dropFiles]="true"` handles files drag&drop with a file preview.
 *
 * Drag & drop available for files and images:
 * @stacked-example(Drag & Drop Chat, chat/chat-drop.component)
 *
 * New message could be tracked outside by using `(send)` output.
 *
 * ```ts
 * <nb-chat-form (send)="onNewMessage($event)">
 * </nb-chat-form>
 *
 * // ...
 *
 * onNewMessage({ message: string, files: any[] }) {
 *   this.service.sendToServer(message, files);
 * }
 * ```
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbChatFormComponent {
    protected cd: ChangeDetectorRef;
    protected domSanitizer: DomSanitizer;
    status: NbComponentStatus;
    inputFocus: boolean;
    inputHover: boolean;
    droppedFiles: any[];
    imgDropTypes: string[];
    /**
     * Predefined message text
     * @type {string}
     */
    message: string;
    /**
     * Message placeholder text
     * @type {string}
     */
    messagePlaceholder: string;
    /**
     * Send button title
     * @type {string}
     */
    buttonTitle: string;
    /**
     * Send button icon, shown if `buttonTitle` is empty
     * @type {string}
     */
    buttonIcon: string;
    /**
     * Show send button
     * @type {boolean}
     */
    showButton: boolean;
    /**
     * Show send button
     * @type {boolean}
     */
    dropFiles: boolean;
    /**
     * File drop placeholder text
     * @type {string}
     */
    dropFilePlaceholder: string;
    /**
     *
     * @type {EventEmitter<{ message: string, files: File[] }>}
     */
    send: EventEmitter<{
        message: string;
        files: File[];
    }>;
    fileOver: boolean;
    constructor(cd: ChangeDetectorRef, domSanitizer: DomSanitizer);
    onDrop(event: any): void;
    removeFile(file: any): void;
    onDragOver(): void;
    onDragLeave(): void;
    sendMessage(): void;
    setStatus(status: NbComponentStatus): void;
    getInputStatus(): NbComponentStatus;
    getButtonStatus(): NbComponentStatus;
    protected getHighlightStatus(): NbComponentStatus;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbChatFormComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbChatFormComponent, "nb-chat-form", never, { "message": "message"; "messagePlaceholder": "messagePlaceholder"; "buttonTitle": "buttonTitle"; "buttonIcon": "buttonIcon"; "showButton": "showButton"; "dropFiles": "dropFiles"; "dropFilePlaceholder": "dropFilePlaceholder"; }, { "send": "send"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2hhdC1mb3JtLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjaGF0LWZvcm0uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyIH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFN0YXR1cyB9IGZyb20gJy4uL2NvbXBvbmVudC1zdGF0dXMnO1xuLyoqXG4gKiBDaGF0IGZvcm0gY29tcG9uZW50LlxuICpcbiAqIFNob3cgYSBtZXNzYWdlIGZvcm0gd2l0aCBhIHNlbmQgbWVzc2FnZSBidXR0b24uXG4gKlxuICogYGBgdHNcbiAqIDxuYi1jaGF0LWZvcm0gc2hvd0J1dHRvbj1cInRydWVcIiBidXR0b25JY29uPVwibmItc2VuZFwiPlxuICogPC9uYi1jaGF0LWZvcm0+XG4gKiBgYGBcbiAqXG4gKiBXaGVuIGBbZHJvcEZpbGVzXT1cInRydWVcImAgaGFuZGxlcyBmaWxlcyBkcmFnJmRyb3Agd2l0aCBhIGZpbGUgcHJldmlldy5cbiAqXG4gKiBEcmFnICYgZHJvcCBhdmFpbGFibGUgZm9yIGZpbGVzIGFuZCBpbWFnZXM6XG4gKiBAc3RhY2tlZC1leGFtcGxlKERyYWcgJiBEcm9wIENoYXQsIGNoYXQvY2hhdC1kcm9wLmNvbXBvbmVudClcbiAqXG4gKiBOZXcgbWVzc2FnZSBjb3VsZCBiZSB0cmFja2VkIG91dHNpZGUgYnkgdXNpbmcgYChzZW5kKWAgb3V0cHV0LlxuICpcbiAqIGBgYHRzXG4gKiA8bmItY2hhdC1mb3JtIChzZW5kKT1cIm9uTmV3TWVzc2FnZSgkZXZlbnQpXCI+XG4gKiA8L25iLWNoYXQtZm9ybT5cbiAqXG4gKiAvLyAuLi5cbiAqXG4gKiBvbk5ld01lc3NhZ2UoeyBtZXNzYWdlOiBzdHJpbmcsIGZpbGVzOiBhbnlbXSB9KSB7XG4gKiAgIHRoaXMuc2VydmljZS5zZW5kVG9TZXJ2ZXIobWVzc2FnZSwgZmlsZXMpO1xuICogfVxuICogYGBgXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iQ2hhdEZvcm1Db21wb25lbnQge1xuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIGRvbVNhbml0aXplcjogRG9tU2FuaXRpemVyO1xuICAgIHN0YXR1czogTmJDb21wb25lbnRTdGF0dXM7XG4gICAgaW5wdXRGb2N1czogYm9vbGVhbjtcbiAgICBpbnB1dEhvdmVyOiBib29sZWFuO1xuICAgIGRyb3BwZWRGaWxlczogYW55W107XG4gICAgaW1nRHJvcFR5cGVzOiBzdHJpbmdbXTtcbiAgICAvKipcbiAgICAgKiBQcmVkZWZpbmVkIG1lc3NhZ2UgdGV4dFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbWVzc2FnZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIE1lc3NhZ2UgcGxhY2Vob2xkZXIgdGV4dFxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgbWVzc2FnZVBsYWNlaG9sZGVyOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2VuZCBidXR0b24gdGl0bGVcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGJ1dHRvblRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICogU2VuZCBidXR0b24gaWNvbiwgc2hvd24gaWYgYGJ1dHRvblRpdGxlYCBpcyBlbXB0eVxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgYnV0dG9uSWNvbjogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIFNob3cgc2VuZCBidXR0b25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBzaG93QnV0dG9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIFNob3cgc2VuZCBidXR0b25cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBkcm9wRmlsZXM6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogRmlsZSBkcm9wIHBsYWNlaG9sZGVyIHRleHRcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIGRyb3BGaWxlUGxhY2Vob2xkZXI6IHN0cmluZztcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEB0eXBlIHtFdmVudEVtaXR0ZXI8eyBtZXNzYWdlOiBzdHJpbmcsIGZpbGVzOiBGaWxlW10gfT59XG4gICAgICovXG4gICAgc2VuZDogRXZlbnRFbWl0dGVyPHtcbiAgICAgICAgbWVzc2FnZTogc3RyaW5nO1xuICAgICAgICBmaWxlczogRmlsZVtdO1xuICAgIH0+O1xuICAgIGZpbGVPdmVyOiBib29sZWFuO1xuICAgIGNvbnN0cnVjdG9yKGNkOiBDaGFuZ2VEZXRlY3RvclJlZiwgZG9tU2FuaXRpemVyOiBEb21TYW5pdGl6ZXIpO1xuICAgIG9uRHJvcChldmVudDogYW55KTogdm9pZDtcbiAgICByZW1vdmVGaWxlKGZpbGU6IGFueSk6IHZvaWQ7XG4gICAgb25EcmFnT3ZlcigpOiB2b2lkO1xuICAgIG9uRHJhZ0xlYXZlKCk6IHZvaWQ7XG4gICAgc2VuZE1lc3NhZ2UoKTogdm9pZDtcbiAgICBzZXRTdGF0dXMoc3RhdHVzOiBOYkNvbXBvbmVudFN0YXR1cyk6IHZvaWQ7XG4gICAgZ2V0SW5wdXRTdGF0dXMoKTogTmJDb21wb25lbnRTdGF0dXM7XG4gICAgZ2V0QnV0dG9uU3RhdHVzKCk6IE5iQ29tcG9uZW50U3RhdHVzO1xuICAgIHByb3RlY3RlZCBnZXRIaWdobGlnaHRTdGF0dXMoKTogTmJDb21wb25lbnRTdGF0dXM7XG59XG4iXX0=