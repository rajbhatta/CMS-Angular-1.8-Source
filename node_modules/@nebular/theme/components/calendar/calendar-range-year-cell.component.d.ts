/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { EventEmitter } from '@angular/core';
import { NbCalendarCell, NbCalendarSize, NbCalendarSizeValues } from '../calendar-kit/model';
import { NbCalendarRange } from './calendar-range.component';
import { NbDateService } from '../calendar-kit/services/date.service';
import { NbBaseCalendarRangeCell } from './base-calendar-range-cell';
import * as ɵngcc0 from '@angular/core';
export declare class NbCalendarRangeYearCellComponent<D> extends NbBaseCalendarRangeCell<D> implements NbCalendarCell<D, NbCalendarRange<D>> {
    protected dateService: NbDateService<D>;
    date: D;
    min: D;
    max: D;
    selectedValue: NbCalendarRange<D>;
    size: NbCalendarSize;
    static ngAcceptInputType_size: NbCalendarSizeValues;
    select: EventEmitter<D>;
    constructor(dateService: NbDateService<D>);
    get inRange(): boolean;
    get rangeStart(): boolean;
    get rangeEnd(): boolean;
    get selected(): boolean;
    get today(): boolean;
    get disabled(): boolean;
    get isLarge(): boolean;
    yearCellClass: boolean;
    rangeCellClass: boolean;
    get year(): number;
    onClick(): void;
    protected smallerThanMin(): boolean;
    protected greaterThanMax(): boolean;
    protected yearStart(): D;
    protected yearEnd(): D;
    protected isInRange(date: D, { start, end }: NbCalendarRange<D>): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbCalendarRangeYearCellComponent<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbCalendarRangeYearCellComponent<any>, "nb-calendar-range-year-cell", never, { "size": "size"; "date": "date"; "min": "min"; "max": "max"; "selectedValue": "selectedValue"; }, { "select": "select"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItcmFuZ2UteWVhci1jZWxsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJjYWxlbmRhci1yYW5nZS15ZWFyLWNlbGwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5pbXBvcnQgeyBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iQ2FsZW5kYXJDZWxsLCBOYkNhbGVuZGFyU2l6ZSwgTmJDYWxlbmRhclNpemVWYWx1ZXMgfSBmcm9tICcuLi9jYWxlbmRhci1raXQvbW9kZWwnO1xuaW1wb3J0IHsgTmJDYWxlbmRhclJhbmdlIH0gZnJvbSAnLi9jYWxlbmRhci1yYW5nZS5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmJEYXRlU2VydmljZSB9IGZyb20gJy4uL2NhbGVuZGFyLWtpdC9zZXJ2aWNlcy9kYXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTmJCYXNlQ2FsZW5kYXJSYW5nZUNlbGwgfSBmcm9tICcuL2Jhc2UtY2FsZW5kYXItcmFuZ2UtY2VsbCc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkNhbGVuZGFyUmFuZ2VZZWFyQ2VsbENvbXBvbmVudDxEPiBleHRlbmRzIE5iQmFzZUNhbGVuZGFyUmFuZ2VDZWxsPEQ+IGltcGxlbWVudHMgTmJDYWxlbmRhckNlbGw8RCwgTmJDYWxlbmRhclJhbmdlPEQ+PiB7XG4gICAgcHJvdGVjdGVkIGRhdGVTZXJ2aWNlOiBOYkRhdGVTZXJ2aWNlPEQ+O1xuICAgIGRhdGU6IEQ7XG4gICAgbWluOiBEO1xuICAgIG1heDogRDtcbiAgICBzZWxlY3RlZFZhbHVlOiBOYkNhbGVuZGFyUmFuZ2U8RD47XG4gICAgc2l6ZTogTmJDYWxlbmRhclNpemU7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX3NpemU6IE5iQ2FsZW5kYXJTaXplVmFsdWVzO1xuICAgIHNlbGVjdDogRXZlbnRFbWl0dGVyPEQ+O1xuICAgIGNvbnN0cnVjdG9yKGRhdGVTZXJ2aWNlOiBOYkRhdGVTZXJ2aWNlPEQ+KTtcbiAgICBnZXQgaW5SYW5nZSgpOiBib29sZWFuO1xuICAgIGdldCByYW5nZVN0YXJ0KCk6IGJvb2xlYW47XG4gICAgZ2V0IHJhbmdlRW5kKCk6IGJvb2xlYW47XG4gICAgZ2V0IHNlbGVjdGVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IHRvZGF5KCk6IGJvb2xlYW47XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgZ2V0IGlzTGFyZ2UoKTogYm9vbGVhbjtcbiAgICB5ZWFyQ2VsbENsYXNzOiBib29sZWFuO1xuICAgIHJhbmdlQ2VsbENsYXNzOiBib29sZWFuO1xuICAgIGdldCB5ZWFyKCk6IG51bWJlcjtcbiAgICBvbkNsaWNrKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHNtYWxsZXJUaGFuTWluKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGdyZWF0ZXJUaGFuTWF4KCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHllYXJTdGFydCgpOiBEO1xuICAgIHByb3RlY3RlZCB5ZWFyRW5kKCk6IEQ7XG4gICAgcHJvdGVjdGVkIGlzSW5SYW5nZShkYXRlOiBELCB7IHN0YXJ0LCBlbmQgfTogTmJDYWxlbmRhclJhbmdlPEQ+KTogYm9vbGVhbjtcbn1cbiJdfQ==