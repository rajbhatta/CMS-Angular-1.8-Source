/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { NbComponentSize } from '../component-size';
import { NbComponentStatus } from '../component-status';
/**
 * Progress Bar is a component for indicating progress.
 *
 * Simple usage:
 *
 * ```html
 * <nb-progress-bar [value]="50"></nb-progress-bar>
 * ```
 * ### Installation
 *
 * Import `NbProgressBarModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbProgressBarModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * Progress bar accepts property `value` in range 0-100
 * @stacked-example(Progress bar, progress-bar/progress-bar-showcase.component)
 *
 * Progress bar background could be configured by providing a `status` property:
 * @stacked-example(Progress bar status, progress-bar/progress-bar-status.component)
 *
 * Progress bar size (height and font-size) could be configured by providing a `size` property:
 * @stacked-example(Progress bar size, progress-bar/progress-bar-size.component)
 *
 * `displayValue` property shows current value inside progress bar. It's also possible to add custom text inside:
 * @stacked-example(Progress bar value, progress-bar/progress-bar-value.component)
 *
 * Progress bar supports `width` and `background-color` transition:
 * @stacked-example(Progress bar interactive, progress-bar/progress-bar-interactive.component)
 *
 * @styles
 *
 * progress-bar-animation-duration:
 * progress-bar-border-radius:
 * progress-bar-text-font-family:
 * progress-bar-tiny-height:
 * progress-bar-tiny-text-font-size:
 * progress-bar-tiny-text-font-weight:
 * progress-bar-tiny-text-line-height:
 * progress-bar-small-height:
 * progress-bar-small-text-font-size:
 * progress-bar-small-text-font-weight:
 * progress-bar-small-text-line-height:
 * progress-bar-medium-height:
 * progress-bar-medium-text-font-size:
 * progress-bar-medium-text-font-weight:
 * progress-bar-medium-text-line-height:
 * progress-bar-large-height:
 * progress-bar-large-text-font-size:
 * progress-bar-large-text-font-weight:
 * progress-bar-large-text-line-height:
 * progress-bar-giant-height:
 * progress-bar-giant-text-font-size:
 * progress-bar-giant-text-font-weight:
 * progress-bar-giant-text-line-height:
 * progress-bar-basic-background-color:
 * progress-bar-basic-filled-background-color:
 * progress-bar-basic-text-color:
 * progress-bar-primary-background-color:
 * progress-bar-primary-filled-background-color:
 * progress-bar-primary-text-color:
 * progress-bar-success-background-color:
 * progress-bar-success-filled-background-color:
 * progress-bar-success-text-color:
 * progress-bar-info-background-color:
 * progress-bar-info-filled-background-color:
 * progress-bar-info-text-color:
 * progress-bar-warning-background-color:
 * progress-bar-warning-filled-background-color:
 * progress-bar-warning-text-color:
 * progress-bar-danger-background-color:
 * progress-bar-danger-filled-background-color:
 * progress-bar-danger-text-color:
 * progress-bar-control-background-color:
 * progress-bar-control-filled-background-color:
 * progress-bar-control-text-color:
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbProgressBarComponent {
    /**
     * Progress bar value in percent (0 - 100)
     */
    value: number;
    /**
     * Progress bar background (`basic` (default), `primary`, `info`, `success`, `warning`, `danger`, `control`)
     */
    status: NbComponentStatus;
    /**
     * Progress bar size (`tiny`, `small`, `medium` (default), `large`, `giant`)
     */
    size: NbComponentSize;
    /**
     * Displays value inside progress bar
     */
    displayValue: boolean;
    get tiny(): boolean;
    get small(): boolean;
    get medium(): boolean;
    get large(): boolean;
    get giant(): boolean;
    get primary(): boolean;
    get success(): boolean;
    get info(): boolean;
    get warning(): boolean;
    get danger(): boolean;
    get basic(): boolean;
    get control(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbProgressBarComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbProgressBarComponent, "nb-progress-bar", never, { "value": "value"; "status": "status"; "size": "size"; "displayValue": "displayValue"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicHJvZ3Jlc3MtYmFyLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJwcm9ncmVzcy1iYXIuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxuICovXG5pbXBvcnQgeyBOYkNvbXBvbmVudFNpemUgfSBmcm9tICcuLi9jb21wb25lbnQtc2l6ZSc7XG5pbXBvcnQgeyBOYkNvbXBvbmVudFN0YXR1cyB9IGZyb20gJy4uL2NvbXBvbmVudC1zdGF0dXMnO1xuLyoqXG4gKiBQcm9ncmVzcyBCYXIgaXMgYSBjb21wb25lbnQgZm9yIGluZGljYXRpbmcgcHJvZ3Jlc3MuXG4gKlxuICogU2ltcGxlIHVzYWdlOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuYi1wcm9ncmVzcy1iYXIgW3ZhbHVlXT1cIjUwXCI+PC9uYi1wcm9ncmVzcy1iYXI+XG4gKiBgYGBcbiAqICMjIyBJbnN0YWxsYXRpb25cbiAqXG4gKiBJbXBvcnQgYE5iUHJvZ3Jlc3NCYXJNb2R1bGVgIHRvIHlvdXIgZmVhdHVyZSBtb2R1bGUuXG4gKiBgYGB0c1xuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC8vIC4uLlxuICogICAgIE5iUHJvZ3Jlc3NCYXJNb2R1bGUsXG4gKiAgIF0sXG4gKiB9KVxuICogZXhwb3J0IGNsYXNzIFBhZ2VNb2R1bGUgeyB9XG4gKiBgYGBcbiAqICMjIyBVc2FnZVxuICpcbiAqIFByb2dyZXNzIGJhciBhY2NlcHRzIHByb3BlcnR5IGB2YWx1ZWAgaW4gcmFuZ2UgMC0xMDBcbiAqIEBzdGFja2VkLWV4YW1wbGUoUHJvZ3Jlc3MgYmFyLCBwcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyLXNob3djYXNlLmNvbXBvbmVudClcbiAqXG4gKiBQcm9ncmVzcyBiYXIgYmFja2dyb3VuZCBjb3VsZCBiZSBjb25maWd1cmVkIGJ5IHByb3ZpZGluZyBhIGBzdGF0dXNgIHByb3BlcnR5OlxuICogQHN0YWNrZWQtZXhhbXBsZShQcm9ncmVzcyBiYXIgc3RhdHVzLCBwcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyLXN0YXR1cy5jb21wb25lbnQpXG4gKlxuICogUHJvZ3Jlc3MgYmFyIHNpemUgKGhlaWdodCBhbmQgZm9udC1zaXplKSBjb3VsZCBiZSBjb25maWd1cmVkIGJ5IHByb3ZpZGluZyBhIGBzaXplYCBwcm9wZXJ0eTpcbiAqIEBzdGFja2VkLWV4YW1wbGUoUHJvZ3Jlc3MgYmFyIHNpemUsIHByb2dyZXNzLWJhci9wcm9ncmVzcy1iYXItc2l6ZS5jb21wb25lbnQpXG4gKlxuICogYGRpc3BsYXlWYWx1ZWAgcHJvcGVydHkgc2hvd3MgY3VycmVudCB2YWx1ZSBpbnNpZGUgcHJvZ3Jlc3MgYmFyLiBJdCdzIGFsc28gcG9zc2libGUgdG8gYWRkIGN1c3RvbSB0ZXh0IGluc2lkZTpcbiAqIEBzdGFja2VkLWV4YW1wbGUoUHJvZ3Jlc3MgYmFyIHZhbHVlLCBwcm9ncmVzcy1iYXIvcHJvZ3Jlc3MtYmFyLXZhbHVlLmNvbXBvbmVudClcbiAqXG4gKiBQcm9ncmVzcyBiYXIgc3VwcG9ydHMgYHdpZHRoYCBhbmQgYGJhY2tncm91bmQtY29sb3JgIHRyYW5zaXRpb246XG4gKiBAc3RhY2tlZC1leGFtcGxlKFByb2dyZXNzIGJhciBpbnRlcmFjdGl2ZSwgcHJvZ3Jlc3MtYmFyL3Byb2dyZXNzLWJhci1pbnRlcmFjdGl2ZS5jb21wb25lbnQpXG4gKlxuICogQHN0eWxlc1xuICpcbiAqIHByb2dyZXNzLWJhci1hbmltYXRpb24tZHVyYXRpb246XG4gKiBwcm9ncmVzcy1iYXItYm9yZGVyLXJhZGl1czpcbiAqIHByb2dyZXNzLWJhci10ZXh0LWZvbnQtZmFtaWx5OlxuICogcHJvZ3Jlc3MtYmFyLXRpbnktaGVpZ2h0OlxuICogcHJvZ3Jlc3MtYmFyLXRpbnktdGV4dC1mb250LXNpemU6XG4gKiBwcm9ncmVzcy1iYXItdGlueS10ZXh0LWZvbnQtd2VpZ2h0OlxuICogcHJvZ3Jlc3MtYmFyLXRpbnktdGV4dC1saW5lLWhlaWdodDpcbiAqIHByb2dyZXNzLWJhci1zbWFsbC1oZWlnaHQ6XG4gKiBwcm9ncmVzcy1iYXItc21hbGwtdGV4dC1mb250LXNpemU6XG4gKiBwcm9ncmVzcy1iYXItc21hbGwtdGV4dC1mb250LXdlaWdodDpcbiAqIHByb2dyZXNzLWJhci1zbWFsbC10ZXh0LWxpbmUtaGVpZ2h0OlxuICogcHJvZ3Jlc3MtYmFyLW1lZGl1bS1oZWlnaHQ6XG4gKiBwcm9ncmVzcy1iYXItbWVkaXVtLXRleHQtZm9udC1zaXplOlxuICogcHJvZ3Jlc3MtYmFyLW1lZGl1bS10ZXh0LWZvbnQtd2VpZ2h0OlxuICogcHJvZ3Jlc3MtYmFyLW1lZGl1bS10ZXh0LWxpbmUtaGVpZ2h0OlxuICogcHJvZ3Jlc3MtYmFyLWxhcmdlLWhlaWdodDpcbiAqIHByb2dyZXNzLWJhci1sYXJnZS10ZXh0LWZvbnQtc2l6ZTpcbiAqIHByb2dyZXNzLWJhci1sYXJnZS10ZXh0LWZvbnQtd2VpZ2h0OlxuICogcHJvZ3Jlc3MtYmFyLWxhcmdlLXRleHQtbGluZS1oZWlnaHQ6XG4gKiBwcm9ncmVzcy1iYXItZ2lhbnQtaGVpZ2h0OlxuICogcHJvZ3Jlc3MtYmFyLWdpYW50LXRleHQtZm9udC1zaXplOlxuICogcHJvZ3Jlc3MtYmFyLWdpYW50LXRleHQtZm9udC13ZWlnaHQ6XG4gKiBwcm9ncmVzcy1iYXItZ2lhbnQtdGV4dC1saW5lLWhlaWdodDpcbiAqIHByb2dyZXNzLWJhci1iYXNpYy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogcHJvZ3Jlc3MtYmFyLWJhc2ljLWZpbGxlZC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogcHJvZ3Jlc3MtYmFyLWJhc2ljLXRleHQtY29sb3I6XG4gKiBwcm9ncmVzcy1iYXItcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yOlxuICogcHJvZ3Jlc3MtYmFyLXByaW1hcnktZmlsbGVkLWJhY2tncm91bmQtY29sb3I6XG4gKiBwcm9ncmVzcy1iYXItcHJpbWFyeS10ZXh0LWNvbG9yOlxuICogcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MtYmFja2dyb3VuZC1jb2xvcjpcbiAqIHByb2dyZXNzLWJhci1zdWNjZXNzLWZpbGxlZC1iYWNrZ3JvdW5kLWNvbG9yOlxuICogcHJvZ3Jlc3MtYmFyLXN1Y2Nlc3MtdGV4dC1jb2xvcjpcbiAqIHByb2dyZXNzLWJhci1pbmZvLWJhY2tncm91bmQtY29sb3I6XG4gKiBwcm9ncmVzcy1iYXItaW5mby1maWxsZWQtYmFja2dyb3VuZC1jb2xvcjpcbiAqIHByb2dyZXNzLWJhci1pbmZvLXRleHQtY29sb3I6XG4gKiBwcm9ncmVzcy1iYXItd2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogcHJvZ3Jlc3MtYmFyLXdhcm5pbmctZmlsbGVkLWJhY2tncm91bmQtY29sb3I6XG4gKiBwcm9ncmVzcy1iYXItd2FybmluZy10ZXh0LWNvbG9yOlxuICogcHJvZ3Jlc3MtYmFyLWRhbmdlci1iYWNrZ3JvdW5kLWNvbG9yOlxuICogcHJvZ3Jlc3MtYmFyLWRhbmdlci1maWxsZWQtYmFja2dyb3VuZC1jb2xvcjpcbiAqIHByb2dyZXNzLWJhci1kYW5nZXItdGV4dC1jb2xvcjpcbiAqIHByb2dyZXNzLWJhci1jb250cm9sLWJhY2tncm91bmQtY29sb3I6XG4gKiBwcm9ncmVzcy1iYXItY29udHJvbC1maWxsZWQtYmFja2dyb3VuZC1jb2xvcjpcbiAqIHByb2dyZXNzLWJhci1jb250cm9sLXRleHQtY29sb3I6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iUHJvZ3Jlc3NCYXJDb21wb25lbnQge1xuICAgIC8qKlxuICAgICAqIFByb2dyZXNzIGJhciB2YWx1ZSBpbiBwZXJjZW50ICgwIC0gMTAwKVxuICAgICAqL1xuICAgIHZhbHVlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICogUHJvZ3Jlc3MgYmFyIGJhY2tncm91bmQgKGBiYXNpY2AgKGRlZmF1bHQpLCBgcHJpbWFyeWAsIGBpbmZvYCwgYHN1Y2Nlc3NgLCBgd2FybmluZ2AsIGBkYW5nZXJgLCBgY29udHJvbGApXG4gICAgICovXG4gICAgc3RhdHVzOiBOYkNvbXBvbmVudFN0YXR1cztcbiAgICAvKipcbiAgICAgKiBQcm9ncmVzcyBiYXIgc2l6ZSAoYHRpbnlgLCBgc21hbGxgLCBgbWVkaXVtYCAoZGVmYXVsdCksIGBsYXJnZWAsIGBnaWFudGApXG4gICAgICovXG4gICAgc2l6ZTogTmJDb21wb25lbnRTaXplO1xuICAgIC8qKlxuICAgICAqIERpc3BsYXlzIHZhbHVlIGluc2lkZSBwcm9ncmVzcyBiYXJcbiAgICAgKi9cbiAgICBkaXNwbGF5VmFsdWU6IGJvb2xlYW47XG4gICAgZ2V0IHRpbnkoKTogYm9vbGVhbjtcbiAgICBnZXQgc21hbGwoKTogYm9vbGVhbjtcbiAgICBnZXQgbWVkaXVtKCk6IGJvb2xlYW47XG4gICAgZ2V0IGxhcmdlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGdpYW50KCk6IGJvb2xlYW47XG4gICAgZ2V0IHByaW1hcnkoKTogYm9vbGVhbjtcbiAgICBnZXQgc3VjY2VzcygpOiBib29sZWFuO1xuICAgIGdldCBpbmZvKCk6IGJvb2xlYW47XG4gICAgZ2V0IHdhcm5pbmcoKTogYm9vbGVhbjtcbiAgICBnZXQgZGFuZ2VyKCk6IGJvb2xlYW47XG4gICAgZ2V0IGJhc2ljKCk6IGJvb2xlYW47XG4gICAgZ2V0IGNvbnRyb2woKTogYm9vbGVhbjtcbn1cbiJdfQ==