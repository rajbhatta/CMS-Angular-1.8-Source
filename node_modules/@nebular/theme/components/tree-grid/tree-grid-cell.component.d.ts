import { ChangeDetectorRef, ElementRef, OnInit, OnDestroy } from '@angular/core';
import { DomSanitizer, SafeStyle } from '@angular/platform-browser';
import { NbLayoutDirectionService } from '../../services/direction.service';
import { NbCellDirective, NbFooterCellDirective, NbHeaderCellDirective } from '../cdk/table/cell';
import { NbTreeGridColumnDefDirective } from './tree-grid-column-def.directive';
import { NbColumnsService } from './tree-grid-columns.service';
import * as ɵngcc0 from '@angular/core';
export declare class NbTreeGridCellDirective extends NbCellDirective implements OnInit, OnDestroy {
    private platformId;
    private window;
    private sanitizer;
    private directionService;
    private columnService;
    private cd;
    private destroy$;
    private readonly tree;
    private readonly columnDef;
    private initialLeftPadding;
    private initialRightPadding;
    private latestWidth;
    elementRef: ElementRef<HTMLElement>;
    get columnWidth(): string;
    get leftPadding(): string | SafeStyle | null;
    get rightPadding(): string | SafeStyle | null;
    constructor(columnDef: NbTreeGridColumnDefDirective, elementRef: ElementRef<HTMLElement>, tree: any, platformId: any, window: any, sanitizer: DomSanitizer, directionService: NbLayoutDirectionService, columnService: NbColumnsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    toggleRow(): void;
    private get initialStartPadding();
    private getStartPadding;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTreeGridCellDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTreeGridCellDirective, "td[nbTreeGridCell]", never, {}, {}, never>;
}
export declare class NbTreeGridHeaderCellDirective extends NbHeaderCellDirective implements OnInit, OnDestroy {
    private columnService;
    private cd;
    private destroy$;
    private latestWidth;
    private readonly tree;
    get columnWidth(): string;
    constructor(columnDef: NbTreeGridColumnDefDirective, elementRef: ElementRef<HTMLElement>, tree: any, columnService: NbColumnsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTreeGridHeaderCellDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTreeGridHeaderCellDirective, "th[nbTreeGridHeaderCell]", never, {}, {}, never>;
}
export declare class NbTreeGridFooterCellDirective extends NbFooterCellDirective implements OnInit, OnDestroy {
    private columnService;
    private cd;
    private destroy$;
    private latestWidth;
    private readonly tree;
    get columnWidth(): string;
    constructor(columnDef: NbTreeGridColumnDefDirective, elementRef: ElementRef, tree: any, columnService: NbColumnsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTreeGridFooterCellDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbTreeGridFooterCellDirective, "td[nbTreeGridFooterCell]", never, {}, {}, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJlZS1ncmlkLWNlbGwuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInRyZWUtZ3JpZC1jZWxsLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFbGVtZW50UmVmLCBPbkluaXQsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlU3R5bGUgfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7IE5iTGF5b3V0RGlyZWN0aW9uU2VydmljZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2RpcmVjdGlvbi5zZXJ2aWNlJztcbmltcG9ydCB7IE5iQ2VsbERpcmVjdGl2ZSwgTmJGb290ZXJDZWxsRGlyZWN0aXZlLCBOYkhlYWRlckNlbGxEaXJlY3RpdmUgfSBmcm9tICcuLi9jZGsvdGFibGUvY2VsbCc7XG5pbXBvcnQgeyBOYlRyZWVHcmlkQ29sdW1uRGVmRGlyZWN0aXZlIH0gZnJvbSAnLi90cmVlLWdyaWQtY29sdW1uLWRlZi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgTmJDb2x1bW5zU2VydmljZSB9IGZyb20gJy4vdHJlZS1ncmlkLWNvbHVtbnMuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlRyZWVHcmlkQ2VsbERpcmVjdGl2ZSBleHRlbmRzIE5iQ2VsbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgcHJpdmF0ZSB3aW5kb3c7XG4gICAgcHJpdmF0ZSBzYW5pdGl6ZXI7XG4gICAgcHJpdmF0ZSBkaXJlY3Rpb25TZXJ2aWNlO1xuICAgIHByaXZhdGUgY29sdW1uU2VydmljZTtcbiAgICBwcml2YXRlIGNkO1xuICAgIHByaXZhdGUgZGVzdHJveSQ7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0cmVlO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgY29sdW1uRGVmO1xuICAgIHByaXZhdGUgaW5pdGlhbExlZnRQYWRkaW5nO1xuICAgIHByaXZhdGUgaW5pdGlhbFJpZ2h0UGFkZGluZztcbiAgICBwcml2YXRlIGxhdGVzdFdpZHRoO1xuICAgIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+O1xuICAgIGdldCBjb2x1bW5XaWR0aCgpOiBzdHJpbmc7XG4gICAgZ2V0IGxlZnRQYWRkaW5nKCk6IHN0cmluZyB8IFNhZmVTdHlsZSB8IG51bGw7XG4gICAgZ2V0IHJpZ2h0UGFkZGluZygpOiBzdHJpbmcgfCBTYWZlU3R5bGUgfCBudWxsO1xuICAgIGNvbnN0cnVjdG9yKGNvbHVtbkRlZjogTmJUcmVlR3JpZENvbHVtbkRlZkRpcmVjdGl2ZSwgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIHRyZWU6IGFueSwgcGxhdGZvcm1JZDogYW55LCB3aW5kb3c6IGFueSwgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIGRpcmVjdGlvblNlcnZpY2U6IE5iTGF5b3V0RGlyZWN0aW9uU2VydmljZSwgY29sdW1uU2VydmljZTogTmJDb2x1bW5zU2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgdG9nZ2xlUm93KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBnZXQgaW5pdGlhbFN0YXJ0UGFkZGluZygpO1xuICAgIHByaXZhdGUgZ2V0U3RhcnRQYWRkaW5nO1xufVxuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJUcmVlR3JpZEhlYWRlckNlbGxEaXJlY3RpdmUgZXh0ZW5kcyBOYkhlYWRlckNlbGxEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJpdmF0ZSBjb2x1bW5TZXJ2aWNlO1xuICAgIHByaXZhdGUgY2Q7XG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBwcml2YXRlIGxhdGVzdFdpZHRoO1xuICAgIHByaXZhdGUgcmVhZG9ubHkgdHJlZTtcbiAgICBnZXQgY29sdW1uV2lkdGgoKTogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKGNvbHVtbkRlZjogTmJUcmVlR3JpZENvbHVtbkRlZkRpcmVjdGl2ZSwgZWxlbWVudFJlZjogRWxlbWVudFJlZjxIVE1MRWxlbWVudD4sIHRyZWU6IGFueSwgY29sdW1uU2VydmljZTogTmJDb2x1bW5zU2VydmljZSwgY2Q6IENoYW5nZURldGVjdG9yUmVmKTtcbiAgICBuZ09uSW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlRyZWVHcmlkRm9vdGVyQ2VsbERpcmVjdGl2ZSBleHRlbmRzIE5iRm9vdGVyQ2VsbERpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uSW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGNvbHVtblNlcnZpY2U7XG4gICAgcHJpdmF0ZSBjZDtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIHByaXZhdGUgbGF0ZXN0V2lkdGg7XG4gICAgcHJpdmF0ZSByZWFkb25seSB0cmVlO1xuICAgIGdldCBjb2x1bW5XaWR0aCgpOiBzdHJpbmc7XG4gICAgY29uc3RydWN0b3IoY29sdW1uRGVmOiBOYlRyZWVHcmlkQ29sdW1uRGVmRGlyZWN0aXZlLCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCB0cmVlOiBhbnksIGNvbHVtblNlcnZpY2U6IE5iQ29sdW1uc1NlcnZpY2UsIGNkOiBDaGFuZ2VEZXRlY3RvclJlZik7XG4gICAgbmdPbkluaXQoKTogdm9pZDtcbiAgICBuZ09uRGVzdHJveSgpOiB2b2lkO1xufVxuIl19