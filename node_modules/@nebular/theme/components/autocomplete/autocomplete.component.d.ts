/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ChangeDetectorRef, ElementRef, EventEmitter, QueryList, AfterContentInit, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { NbComponentSize } from '../component-size';
import { NbPosition } from '../cdk/overlay/overlay-position';
import { NbOptionComponent } from '../option/option.component';
import { NbPortalDirective } from '../cdk/overlay/mapping';
/**
 * The `NbAutocompleteComponent` overlay component.
 * Provides an `NbOptionList` overlay component.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbAutocompleteComponent<T> implements AfterContentInit, OnDestroy {
    protected cd: ChangeDetectorRef;
    protected destroy$: Subject<void>;
    /**
     * HTML input reference to which autocomplete connected.
     * */
    hostRef: ElementRef;
    /**
     * Component scoped id for aria attributes.
     * */
    id: string;
    /**
     * @docs-private
     * Current overlay position because of we have to toggle overlayPosition
     * in [ngClass] direction.
     */
    _overlayPosition: NbPosition;
    get overlayPosition(): NbPosition;
    set overlayPosition(value: NbPosition);
    /**
     * Returns width of the input.
     * */
    get hostWidth(): number;
    /**
     * Function passed as input to process each string option value before render.
     * */
    handleDisplayFn: ((value: any) => string);
    /**
     * Autocomplete size, available sizes:
     * `tiny`, `small`, `medium` (default), `large`, `giant`
     */
    size: NbComponentSize;
    /**
     * Flag passed as input to always make first option active.
     * */
    activeFirst: boolean;
    /**
     * Will be emitted when selected value changes.
     * */
    selectedChange: EventEmitter<T>;
    /**
      * List of `NbOptionComponent`'s components passed as content.
    * */
    options: QueryList<NbOptionComponent<T>>;
    /**
     * NbOptionList with options content.
     * */
    portal: NbPortalDirective;
    constructor(cd: ChangeDetectorRef);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    /**
     * Autocomplete knows nothing about host html input element.
     * So, attach method set input hostRef for styling.
     * */
    setHost(hostRef: ElementRef): void;
    /**
     * Propagate selected value.
     * */
    emitSelected(selected: T): void;
    get tiny(): boolean;
    get small(): boolean;
    get medium(): boolean;
    get large(): boolean;
    get giant(): boolean;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbAutocompleteComponent<any>, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbAutocompleteComponent<any>, "nb-autocomplete", never, { "size": "size"; "activeFirst": "activeFirst"; "handleDisplayFn": "handleDisplayFn"; }, { "selectedChange": "selectedChange"; }, ["options"], ["nb-option, nb-option-group"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0b2NvbXBsZXRlLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhdXRvY29tcGxldGUuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cbiAqL1xuaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgUXVlcnlMaXN0LCBBZnRlckNvbnRlbnRJbml0LCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5iQ29tcG9uZW50U2l6ZSB9IGZyb20gJy4uL2NvbXBvbmVudC1zaXplJztcbmltcG9ydCB7IE5iUG9zaXRpb24gfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9vdmVybGF5LXBvc2l0aW9uJztcbmltcG9ydCB7IE5iT3B0aW9uQ29tcG9uZW50IH0gZnJvbSAnLi4vb3B0aW9uL29wdGlvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmJQb3J0YWxEaXJlY3RpdmUgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9tYXBwaW5nJztcbi8qKlxuICogVGhlIGBOYkF1dG9jb21wbGV0ZUNvbXBvbmVudGAgb3ZlcmxheSBjb21wb25lbnQuXG4gKiBQcm92aWRlcyBhbiBgTmJPcHRpb25MaXN0YCBvdmVybGF5IGNvbXBvbmVudC5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkF1dG9jb21wbGV0ZUNvbXBvbmVudDxUPiBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgcHJvdGVjdGVkIGNkOiBDaGFuZ2VEZXRlY3RvclJlZjtcbiAgICBwcm90ZWN0ZWQgZGVzdHJveSQ6IFN1YmplY3Q8dm9pZD47XG4gICAgLyoqXG4gICAgICogSFRNTCBpbnB1dCByZWZlcmVuY2UgdG8gd2hpY2ggYXV0b2NvbXBsZXRlIGNvbm5lY3RlZC5cbiAgICAgKiAqL1xuICAgIGhvc3RSZWY6IEVsZW1lbnRSZWY7XG4gICAgLyoqXG4gICAgICogQ29tcG9uZW50IHNjb3BlZCBpZCBmb3IgYXJpYSBhdHRyaWJ1dGVzLlxuICAgICAqICovXG4gICAgaWQ6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiBAZG9jcy1wcml2YXRlXG4gICAgICogQ3VycmVudCBvdmVybGF5IHBvc2l0aW9uIGJlY2F1c2Ugb2Ygd2UgaGF2ZSB0byB0b2dnbGUgb3ZlcmxheVBvc2l0aW9uXG4gICAgICogaW4gW25nQ2xhc3NdIGRpcmVjdGlvbi5cbiAgICAgKi9cbiAgICBfb3ZlcmxheVBvc2l0aW9uOiBOYlBvc2l0aW9uO1xuICAgIGdldCBvdmVybGF5UG9zaXRpb24oKTogTmJQb3NpdGlvbjtcbiAgICBzZXQgb3ZlcmxheVBvc2l0aW9uKHZhbHVlOiBOYlBvc2l0aW9uKTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHdpZHRoIG9mIHRoZSBpbnB1dC5cbiAgICAgKiAqL1xuICAgIGdldCBob3N0V2lkdGgoKTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHBhc3NlZCBhcyBpbnB1dCB0byBwcm9jZXNzIGVhY2ggc3RyaW5nIG9wdGlvbiB2YWx1ZSBiZWZvcmUgcmVuZGVyLlxuICAgICAqICovXG4gICAgaGFuZGxlRGlzcGxheUZuOiAoKHZhbHVlOiBhbnkpID0+IHN0cmluZyk7XG4gICAgLyoqXG4gICAgICogQXV0b2NvbXBsZXRlIHNpemUsIGF2YWlsYWJsZSBzaXplczpcbiAgICAgKiBgdGlueWAsIGBzbWFsbGAsIGBtZWRpdW1gIChkZWZhdWx0KSwgYGxhcmdlYCwgYGdpYW50YFxuICAgICAqL1xuICAgIHNpemU6IE5iQ29tcG9uZW50U2l6ZTtcbiAgICAvKipcbiAgICAgKiBGbGFnIHBhc3NlZCBhcyBpbnB1dCB0byBhbHdheXMgbWFrZSBmaXJzdCBvcHRpb24gYWN0aXZlLlxuICAgICAqICovXG4gICAgYWN0aXZlRmlyc3Q6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICogV2lsbCBiZSBlbWl0dGVkIHdoZW4gc2VsZWN0ZWQgdmFsdWUgY2hhbmdlcy5cbiAgICAgKiAqL1xuICAgIHNlbGVjdGVkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8VD47XG4gICAgLyoqXG4gICAgICAqIExpc3Qgb2YgYE5iT3B0aW9uQ29tcG9uZW50YCdzIGNvbXBvbmVudHMgcGFzc2VkIGFzIGNvbnRlbnQuXG4gICAgKiAqL1xuICAgIG9wdGlvbnM6IFF1ZXJ5TGlzdDxOYk9wdGlvbkNvbXBvbmVudDxUPj47XG4gICAgLyoqXG4gICAgICogTmJPcHRpb25MaXN0IHdpdGggb3B0aW9ucyBjb250ZW50LlxuICAgICAqICovXG4gICAgcG9ydGFsOiBOYlBvcnRhbERpcmVjdGl2ZTtcbiAgICBjb25zdHJ1Y3RvcihjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgLyoqXG4gICAgICogQXV0b2NvbXBsZXRlIGtub3dzIG5vdGhpbmcgYWJvdXQgaG9zdCBodG1sIGlucHV0IGVsZW1lbnQuXG4gICAgICogU28sIGF0dGFjaCBtZXRob2Qgc2V0IGlucHV0IGhvc3RSZWYgZm9yIHN0eWxpbmcuXG4gICAgICogKi9cbiAgICBzZXRIb3N0KGhvc3RSZWY6IEVsZW1lbnRSZWYpOiB2b2lkO1xuICAgIC8qKlxuICAgICAqIFByb3BhZ2F0ZSBzZWxlY3RlZCB2YWx1ZS5cbiAgICAgKiAqL1xuICAgIGVtaXRTZWxlY3RlZChzZWxlY3RlZDogVCk6IHZvaWQ7XG4gICAgZ2V0IHRpbnkoKTogYm9vbGVhbjtcbiAgICBnZXQgc21hbGwoKTogYm9vbGVhbjtcbiAgICBnZXQgbWVkaXVtKCk6IGJvb2xlYW47XG4gICAgZ2V0IGxhcmdlKCk6IGJvb2xlYW47XG4gICAgZ2V0IGdpYW50KCk6IGJvb2xlYW47XG59XG4iXX0=