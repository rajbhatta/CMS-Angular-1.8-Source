import { NgZone } from '@angular/core';
import { BlockScrollStrategy, ScrollDispatcher, ScrollStrategyOptions } from '@angular/cdk/overlay';
import { NbLayoutScrollService } from '../../../services/scroll.service';
import { NbViewportRulerAdapter } from './viewport-ruler-adapter';
/**
 * Overrides default block scroll strategy because default strategy blocks scrolling on the body only.
 * But Nebular has its own scrollable container - nb-layout. So, we need to block scrolling in it to.
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbBlockScrollStrategyAdapter extends BlockScrollStrategy {
    protected scrollService: NbLayoutScrollService;
    constructor(document: any, viewportRuler: NbViewportRulerAdapter, scrollService: NbLayoutScrollService);
    enable(): void;
    disable(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbBlockScrollStrategyAdapter, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbBlockScrollStrategyAdapter>;
}
export declare class NbScrollStrategyOptions extends ScrollStrategyOptions {
    protected scrollService: NbLayoutScrollService;
    protected scrollDispatcher: ScrollDispatcher;
    protected viewportRuler: NbViewportRulerAdapter;
    protected ngZone: NgZone;
    protected document: any;
    constructor(scrollService: NbLayoutScrollService, scrollDispatcher: ScrollDispatcher, viewportRuler: NbViewportRulerAdapter, ngZone: NgZone, document: any);
    block: () => NbBlockScrollStrategyAdapter;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbScrollStrategyOptions, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbScrollStrategyOptions>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmxvY2stc2Nyb2xsLXN0cmF0ZWd5LWFkYXB0ZXIuZC50cyIsInNvdXJjZXMiOlsiYmxvY2stc2Nyb2xsLXN0cmF0ZWd5LWFkYXB0ZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEJsb2NrU2Nyb2xsU3RyYXRlZ3ksIFNjcm9sbERpc3BhdGNoZXIsIFNjcm9sbFN0cmF0ZWd5T3B0aW9ucyB9IGZyb20gJ0Bhbmd1bGFyL2Nkay9vdmVybGF5JztcbmltcG9ydCB7IE5iTGF5b3V0U2Nyb2xsU2VydmljZSB9IGZyb20gJy4uLy4uLy4uL3NlcnZpY2VzL3Njcm9sbC5zZXJ2aWNlJztcbmltcG9ydCB7IE5iVmlld3BvcnRSdWxlckFkYXB0ZXIgfSBmcm9tICcuL3ZpZXdwb3J0LXJ1bGVyLWFkYXB0ZXInO1xuLyoqXG4gKiBPdmVycmlkZXMgZGVmYXVsdCBibG9jayBzY3JvbGwgc3RyYXRlZ3kgYmVjYXVzZSBkZWZhdWx0IHN0cmF0ZWd5IGJsb2NrcyBzY3JvbGxpbmcgb24gdGhlIGJvZHkgb25seS5cbiAqIEJ1dCBOZWJ1bGFyIGhhcyBpdHMgb3duIHNjcm9sbGFibGUgY29udGFpbmVyIC0gbmItbGF5b3V0LiBTbywgd2UgbmVlZCB0byBibG9jayBzY3JvbGxpbmcgaW4gaXQgdG8uXG4gKiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJCbG9ja1Njcm9sbFN0cmF0ZWd5QWRhcHRlciBleHRlbmRzIEJsb2NrU2Nyb2xsU3RyYXRlZ3kge1xuICAgIHByb3RlY3RlZCBzY3JvbGxTZXJ2aWNlOiBOYkxheW91dFNjcm9sbFNlcnZpY2U7XG4gICAgY29uc3RydWN0b3IoZG9jdW1lbnQ6IGFueSwgdmlld3BvcnRSdWxlcjogTmJWaWV3cG9ydFJ1bGVyQWRhcHRlciwgc2Nyb2xsU2VydmljZTogTmJMYXlvdXRTY3JvbGxTZXJ2aWNlKTtcbiAgICBlbmFibGUoKTogdm9pZDtcbiAgICBkaXNhYmxlKCk6IHZvaWQ7XG59XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYlNjcm9sbFN0cmF0ZWd5T3B0aW9ucyBleHRlbmRzIFNjcm9sbFN0cmF0ZWd5T3B0aW9ucyB7XG4gICAgcHJvdGVjdGVkIHNjcm9sbFNlcnZpY2U6IE5iTGF5b3V0U2Nyb2xsU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgc2Nyb2xsRGlzcGF0Y2hlcjogU2Nyb2xsRGlzcGF0Y2hlcjtcbiAgICBwcm90ZWN0ZWQgdmlld3BvcnRSdWxlcjogTmJWaWV3cG9ydFJ1bGVyQWRhcHRlcjtcbiAgICBwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmU7XG4gICAgcHJvdGVjdGVkIGRvY3VtZW50OiBhbnk7XG4gICAgY29uc3RydWN0b3Ioc2Nyb2xsU2VydmljZTogTmJMYXlvdXRTY3JvbGxTZXJ2aWNlLCBzY3JvbGxEaXNwYXRjaGVyOiBTY3JvbGxEaXNwYXRjaGVyLCB2aWV3cG9ydFJ1bGVyOiBOYlZpZXdwb3J0UnVsZXJBZGFwdGVyLCBuZ1pvbmU6IE5nWm9uZSwgZG9jdW1lbnQ6IGFueSk7XG4gICAgYmxvY2s6ICgpID0+IE5iQmxvY2tTY3JvbGxTdHJhdGVneUFkYXB0ZXI7XG59XG4iXX0=