import { ElementRef, SimpleChange, Type } from '@angular/core';
import { NbTrigger, NbTriggerStrategy, NbTriggerStrategyBuilderService } from '../overlay-trigger';
import { NbAdjustableConnectedPositionStrategy, NbAdjustment, NbPosition, NbPositionBuilderService } from '../overlay-position';
import { NbRenderableContainer } from '../overlay-container';
import { NbOverlayContent } from '../overlay-service';
import { NbDynamicOverlay } from './dynamic-overlay';
import { NbOverlayConfig } from '../mapping';
import * as ɵngcc0 from '@angular/core';
export declare class NbDynamicOverlayChange extends SimpleChange {
    constructor(previousValue: any, currentValue: any, firstChange?: boolean);
    isChanged(): boolean;
}
export declare class NbDynamicOverlayHandler {
    private positionBuilder;
    private triggerStrategyBuilder;
    private dynamicOverlayService;
    protected _componentType: Type<NbRenderableContainer>;
    protected _host: ElementRef;
    protected _context: Object;
    protected _content: NbOverlayContent;
    protected _trigger: NbTrigger;
    protected _position: NbPosition;
    protected _adjustment: NbAdjustment;
    protected _offset: number;
    protected _overlayConfig: NbOverlayConfig;
    protected dynamicOverlay: NbDynamicOverlay;
    protected triggerStrategy: NbTriggerStrategy;
    protected positionStrategy: NbAdjustableConnectedPositionStrategy;
    protected changes: {
        [key: string]: NbDynamicOverlayChange;
    };
    constructor(positionBuilder: NbPositionBuilderService, triggerStrategyBuilder: NbTriggerStrategyBuilderService, dynamicOverlayService: NbDynamicOverlay);
    host(host: ElementRef): this;
    trigger(trigger: NbTrigger): this;
    position(position: NbPosition): this;
    adjustment(adjustment: NbAdjustment): this;
    componentType(componentType: Type<NbRenderableContainer>): this;
    content(content: NbOverlayContent): this;
    context(context: {}): this;
    offset(offset: number): this;
    overlayConfig(overlayConfig: NbOverlayConfig): this;
    build(): NbDynamicOverlay;
    rebuild(): NbDynamicOverlay;
    connect(): void;
    disconnect(): void;
    destroy(): void;
    protected createPositionStrategy(): NbAdjustableConnectedPositionStrategy;
    protected subscribeOnTriggers(dynamicOverlay: NbDynamicOverlay): void;
    protected isContainerRerenderRequired(): boolean;
    protected isPositionStrategyUpdateRequired(): boolean;
    protected isTriggerStrategyUpdateRequired(): boolean;
    protected isComponentTypeUpdateRequired(): boolean;
    private isOverlayConfigUpdateRequired;
    protected isComponentTypeUpdated(): boolean;
    protected isContentUpdated(): boolean;
    protected isContextUpdated(): boolean;
    protected isAdjustmentUpdated(): boolean;
    protected isPositionUpdated(): boolean;
    protected isHostUpdated(): boolean;
    protected isTriggerUpdated(): boolean;
    protected isOffsetUpdated(): boolean;
    protected isOverlayConfigUpdated(): boolean;
    protected clearChanges(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbDynamicOverlayHandler, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbDynamicOverlayHandler>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHluYW1pYy1vdmVybGF5LWhhbmRsZXIuZC50cyIsInNvdXJjZXMiOlsiZHluYW1pYy1vdmVybGF5LWhhbmRsZXIuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBTaW1wbGVDaGFuZ2UsIFR5cGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iVHJpZ2dlciwgTmJUcmlnZ2VyU3RyYXRlZ3ksIE5iVHJpZ2dlclN0cmF0ZWd5QnVpbGRlclNlcnZpY2UgfSBmcm9tICcuLi9vdmVybGF5LXRyaWdnZXInO1xuaW1wb3J0IHsgTmJBZGp1c3RhYmxlQ29ubmVjdGVkUG9zaXRpb25TdHJhdGVneSwgTmJBZGp1c3RtZW50LCBOYlBvc2l0aW9uLCBOYlBvc2l0aW9uQnVpbGRlclNlcnZpY2UgfSBmcm9tICcuLi9vdmVybGF5LXBvc2l0aW9uJztcbmltcG9ydCB7IE5iUmVuZGVyYWJsZUNvbnRhaW5lciB9IGZyb20gJy4uL292ZXJsYXktY29udGFpbmVyJztcbmltcG9ydCB7IE5iT3ZlcmxheUNvbnRlbnQgfSBmcm9tICcuLi9vdmVybGF5LXNlcnZpY2UnO1xuaW1wb3J0IHsgTmJEeW5hbWljT3ZlcmxheSB9IGZyb20gJy4vZHluYW1pYy1vdmVybGF5JztcbmltcG9ydCB7IE5iT3ZlcmxheUNvbmZpZyB9IGZyb20gJy4uL21hcHBpbmcnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJEeW5hbWljT3ZlcmxheUNoYW5nZSBleHRlbmRzIFNpbXBsZUNoYW5nZSB7XG4gICAgY29uc3RydWN0b3IocHJldmlvdXNWYWx1ZTogYW55LCBjdXJyZW50VmFsdWU6IGFueSwgZmlyc3RDaGFuZ2U/OiBib29sZWFuKTtcbiAgICBpc0NoYW5nZWQoKTogYm9vbGVhbjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iRHluYW1pY092ZXJsYXlIYW5kbGVyIHtcbiAgICBwcml2YXRlIHBvc2l0aW9uQnVpbGRlcjtcbiAgICBwcml2YXRlIHRyaWdnZXJTdHJhdGVneUJ1aWxkZXI7XG4gICAgcHJpdmF0ZSBkeW5hbWljT3ZlcmxheVNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIF9jb21wb25lbnRUeXBlOiBUeXBlPE5iUmVuZGVyYWJsZUNvbnRhaW5lcj47XG4gICAgcHJvdGVjdGVkIF9ob3N0OiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBfY29udGV4dDogT2JqZWN0O1xuICAgIHByb3RlY3RlZCBfY29udGVudDogTmJPdmVybGF5Q29udGVudDtcbiAgICBwcm90ZWN0ZWQgX3RyaWdnZXI6IE5iVHJpZ2dlcjtcbiAgICBwcm90ZWN0ZWQgX3Bvc2l0aW9uOiBOYlBvc2l0aW9uO1xuICAgIHByb3RlY3RlZCBfYWRqdXN0bWVudDogTmJBZGp1c3RtZW50O1xuICAgIHByb3RlY3RlZCBfb2Zmc2V0OiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF9vdmVybGF5Q29uZmlnOiBOYk92ZXJsYXlDb25maWc7XG4gICAgcHJvdGVjdGVkIGR5bmFtaWNPdmVybGF5OiBOYkR5bmFtaWNPdmVybGF5O1xuICAgIHByb3RlY3RlZCB0cmlnZ2VyU3RyYXRlZ3k6IE5iVHJpZ2dlclN0cmF0ZWd5O1xuICAgIHByb3RlY3RlZCBwb3NpdGlvblN0cmF0ZWd5OiBOYkFkanVzdGFibGVDb25uZWN0ZWRQb3NpdGlvblN0cmF0ZWd5O1xuICAgIHByb3RlY3RlZCBjaGFuZ2VzOiB7XG4gICAgICAgIFtrZXk6IHN0cmluZ106IE5iRHluYW1pY092ZXJsYXlDaGFuZ2U7XG4gICAgfTtcbiAgICBjb25zdHJ1Y3Rvcihwb3NpdGlvbkJ1aWxkZXI6IE5iUG9zaXRpb25CdWlsZGVyU2VydmljZSwgdHJpZ2dlclN0cmF0ZWd5QnVpbGRlcjogTmJUcmlnZ2VyU3RyYXRlZ3lCdWlsZGVyU2VydmljZSwgZHluYW1pY092ZXJsYXlTZXJ2aWNlOiBOYkR5bmFtaWNPdmVybGF5KTtcbiAgICBob3N0KGhvc3Q6IEVsZW1lbnRSZWYpOiB0aGlzO1xuICAgIHRyaWdnZXIodHJpZ2dlcjogTmJUcmlnZ2VyKTogdGhpcztcbiAgICBwb3NpdGlvbihwb3NpdGlvbjogTmJQb3NpdGlvbik6IHRoaXM7XG4gICAgYWRqdXN0bWVudChhZGp1c3RtZW50OiBOYkFkanVzdG1lbnQpOiB0aGlzO1xuICAgIGNvbXBvbmVudFR5cGUoY29tcG9uZW50VHlwZTogVHlwZTxOYlJlbmRlcmFibGVDb250YWluZXI+KTogdGhpcztcbiAgICBjb250ZW50KGNvbnRlbnQ6IE5iT3ZlcmxheUNvbnRlbnQpOiB0aGlzO1xuICAgIGNvbnRleHQoY29udGV4dDoge30pOiB0aGlzO1xuICAgIG9mZnNldChvZmZzZXQ6IG51bWJlcik6IHRoaXM7XG4gICAgb3ZlcmxheUNvbmZpZyhvdmVybGF5Q29uZmlnOiBOYk92ZXJsYXlDb25maWcpOiB0aGlzO1xuICAgIGJ1aWxkKCk6IE5iRHluYW1pY092ZXJsYXk7XG4gICAgcmVidWlsZCgpOiBOYkR5bmFtaWNPdmVybGF5O1xuICAgIGNvbm5lY3QoKTogdm9pZDtcbiAgICBkaXNjb25uZWN0KCk6IHZvaWQ7XG4gICAgZGVzdHJveSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjcmVhdGVQb3NpdGlvblN0cmF0ZWd5KCk6IE5iQWRqdXN0YWJsZUNvbm5lY3RlZFBvc2l0aW9uU3RyYXRlZ3k7XG4gICAgcHJvdGVjdGVkIHN1YnNjcmliZU9uVHJpZ2dlcnMoZHluYW1pY092ZXJsYXk6IE5iRHluYW1pY092ZXJsYXkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBpc0NvbnRhaW5lclJlcmVuZGVyUmVxdWlyZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNQb3NpdGlvblN0cmF0ZWd5VXBkYXRlUmVxdWlyZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNUcmlnZ2VyU3RyYXRlZ3lVcGRhdGVSZXF1aXJlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBpc0NvbXBvbmVudFR5cGVVcGRhdGVSZXF1aXJlZCgpOiBib29sZWFuO1xuICAgIHByaXZhdGUgaXNPdmVybGF5Q29uZmlnVXBkYXRlUmVxdWlyZWQ7XG4gICAgcHJvdGVjdGVkIGlzQ29tcG9uZW50VHlwZVVwZGF0ZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNDb250ZW50VXBkYXRlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBpc0NvbnRleHRVcGRhdGVkKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzQWRqdXN0bWVudFVwZGF0ZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNQb3NpdGlvblVwZGF0ZWQoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNIb3N0VXBkYXRlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBpc1RyaWdnZXJVcGRhdGVkKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzT2Zmc2V0VXBkYXRlZCgpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBpc092ZXJsYXlDb25maWdVcGRhdGVkKCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGNsZWFyQ2hhbmdlcygpOiB2b2lkO1xufVxuIl19