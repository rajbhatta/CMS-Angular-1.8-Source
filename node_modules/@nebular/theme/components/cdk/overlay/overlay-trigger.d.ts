import { ComponentRef } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export declare type NbTriggerValues = 'noop' | 'click' | 'hover' | 'hint' | 'focus';
export declare enum NbTrigger {
    NOOP = "noop",
    CLICK = "click",
    HOVER = "hover",
    HINT = "hint",
    FOCUS = "focus"
}
/**
 * Provides entity with two event stream: show and hide.
 * Each stream provides different events depends on implementation.
 * We have three main trigger strategies: click, hint and hover.
 * */
export interface NbTriggerStrategy {
    show$: Observable<never | Event>;
    hide$: Observable<never | Event>;
    destroy(): any;
}
/**
 * TODO maybe we have to use renderer.listen instead of observableFromEvent?
 * Renderer provides capability use it in service worker, ssr and so on.
 * */
export declare abstract class NbTriggerStrategyBase implements NbTriggerStrategy {
    protected document: Document;
    protected host: HTMLElement;
    protected container: () => ComponentRef<any>;
    destroy(): void;
    protected destroyed$: Subject<unknown>;
    protected isNotOnHostOrContainer(event: Event): boolean;
    protected isOnHostOrContainer(event: Event): boolean;
    protected isOnHost({ target }: Event): boolean;
    protected isOnContainer({ target }: Event): boolean;
    abstract show$: Observable<Event>;
    abstract hide$: Observable<Event>;
    constructor(document: Document, host: HTMLElement, container: () => ComponentRef<any>);
}
/**
 * Creates show and hide event streams.
 * Fires toggle event when the click was performed on the host element.
 * Fires close event when the click was performed on the document but
 * not on the host or container.
 * */
export declare class NbClickTriggerStrategy extends NbTriggerStrategyBase {
    protected click$: Observable<[boolean, Event]>;
    readonly show$: Observable<Event>;
    readonly hide$: Observable<Event>;
}
/**
 * Creates show and hide event streams.
 * Fires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.
 * Fires close event when the mouse leaves the host element and stops out of the host and popover container.
 * */
export declare class NbHoverTriggerStrategy extends NbTriggerStrategyBase {
    show$: Observable<Event>;
    hide$: Observable<Event>;
}
/**
 * Creates show and hide event streams.
 * Fires open event when a mouse hovers over the host element and stay over at least 100 milliseconds.
 * Fires close event when the mouse leaves the host element.
 * */
export declare class NbHintTriggerStrategy extends NbTriggerStrategyBase {
    show$: Observable<Event>;
    hide$: Observable<Event>;
}
/**
 * Creates show and hide event streams.
 * Fires open event when a focus is on the host element and stay over at least 100 milliseconds.
 * Fires close event when the focus leaves the host element.
 * */
export declare class NbFocusTriggerStrategy extends NbTriggerStrategyBase {
    protected focusOut$: Observable<Event>;
    protected clickIn$: Observable<Event>;
    protected clickOut$: Observable<Event>;
    protected tabKeyPress$: Observable<Event>;
    show$: Observable<Event>;
    hide$: Observable<Event>;
}
/**
 * Creates empty show and hide event streams.
 * */
export declare class NbNoopTriggerStrategy extends NbTriggerStrategyBase {
    show$: Observable<Event>;
    hide$: Observable<Event>;
}
export declare class NbTriggerStrategyBuilderService {
    protected _document: any;
    protected _host: HTMLElement;
    protected _container: () => ComponentRef<any>;
    protected _trigger: NbTrigger;
    constructor(_document: any);
    trigger(trigger: NbTrigger): this;
    host(host: HTMLElement): this;
    container(container: () => ComponentRef<any>): this;
    build(): NbTriggerStrategy;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbTriggerStrategyBuilderService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbTriggerStrategyBuilderService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3ZlcmxheS10cmlnZ2VyLmQudHMiLCJzb3VyY2VzIjpbIm92ZXJsYXktdHJpZ2dlci5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmV4cG9ydCBkZWNsYXJlIHR5cGUgTmJUcmlnZ2VyVmFsdWVzID0gJ25vb3AnIHwgJ2NsaWNrJyB8ICdob3ZlcicgfCAnaGludCcgfCAnZm9jdXMnO1xuZXhwb3J0IGRlY2xhcmUgZW51bSBOYlRyaWdnZXIge1xuICAgIE5PT1AgPSBcIm5vb3BcIixcbiAgICBDTElDSyA9IFwiY2xpY2tcIixcbiAgICBIT1ZFUiA9IFwiaG92ZXJcIixcbiAgICBISU5UID0gXCJoaW50XCIsXG4gICAgRk9DVVMgPSBcImZvY3VzXCJcbn1cbi8qKlxuICogUHJvdmlkZXMgZW50aXR5IHdpdGggdHdvIGV2ZW50IHN0cmVhbTogc2hvdyBhbmQgaGlkZS5cbiAqIEVhY2ggc3RyZWFtIHByb3ZpZGVzIGRpZmZlcmVudCBldmVudHMgZGVwZW5kcyBvbiBpbXBsZW1lbnRhdGlvbi5cbiAqIFdlIGhhdmUgdGhyZWUgbWFpbiB0cmlnZ2VyIHN0cmF0ZWdpZXM6IGNsaWNrLCBoaW50IGFuZCBob3Zlci5cbiAqICovXG5leHBvcnQgaW50ZXJmYWNlIE5iVHJpZ2dlclN0cmF0ZWd5IHtcbiAgICBzaG93JDogT2JzZXJ2YWJsZTxuZXZlciB8IEV2ZW50PjtcbiAgICBoaWRlJDogT2JzZXJ2YWJsZTxuZXZlciB8IEV2ZW50PjtcbiAgICBkZXN0cm95KCk6IGFueTtcbn1cbi8qKlxuICogVE9ETyBtYXliZSB3ZSBoYXZlIHRvIHVzZSByZW5kZXJlci5saXN0ZW4gaW5zdGVhZCBvZiBvYnNlcnZhYmxlRnJvbUV2ZW50P1xuICogUmVuZGVyZXIgcHJvdmlkZXMgY2FwYWJpbGl0eSB1c2UgaXQgaW4gc2VydmljZSB3b3JrZXIsIHNzciBhbmQgc28gb24uXG4gKiAqL1xuZXhwb3J0IGRlY2xhcmUgYWJzdHJhY3QgY2xhc3MgTmJUcmlnZ2VyU3RyYXRlZ3lCYXNlIGltcGxlbWVudHMgTmJUcmlnZ2VyU3RyYXRlZ3kge1xuICAgIHByb3RlY3RlZCBkb2N1bWVudDogRG9jdW1lbnQ7XG4gICAgcHJvdGVjdGVkIGhvc3Q6IEhUTUxFbGVtZW50O1xuICAgIHByb3RlY3RlZCBjb250YWluZXI6ICgpID0+IENvbXBvbmVudFJlZjxhbnk+O1xuICAgIGRlc3Ryb3koKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgZGVzdHJveWVkJDogU3ViamVjdDx1bmtub3duPjtcbiAgICBwcm90ZWN0ZWQgaXNOb3RPbkhvc3RPckNvbnRhaW5lcihldmVudDogRXZlbnQpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBpc09uSG9zdE9yQ29udGFpbmVyKGV2ZW50OiBFdmVudCk6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIGlzT25Ib3N0KHsgdGFyZ2V0IH06IEV2ZW50KTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgaXNPbkNvbnRhaW5lcih7IHRhcmdldCB9OiBFdmVudCk6IGJvb2xlYW47XG4gICAgYWJzdHJhY3Qgc2hvdyQ6IE9ic2VydmFibGU8RXZlbnQ+O1xuICAgIGFic3RyYWN0IGhpZGUkOiBPYnNlcnZhYmxlPEV2ZW50PjtcbiAgICBjb25zdHJ1Y3Rvcihkb2N1bWVudDogRG9jdW1lbnQsIGhvc3Q6IEhUTUxFbGVtZW50LCBjb250YWluZXI6ICgpID0+IENvbXBvbmVudFJlZjxhbnk+KTtcbn1cbi8qKlxuICogQ3JlYXRlcyBzaG93IGFuZCBoaWRlIGV2ZW50IHN0cmVhbXMuXG4gKiBGaXJlcyB0b2dnbGUgZXZlbnQgd2hlbiB0aGUgY2xpY2sgd2FzIHBlcmZvcm1lZCBvbiB0aGUgaG9zdCBlbGVtZW50LlxuICogRmlyZXMgY2xvc2UgZXZlbnQgd2hlbiB0aGUgY2xpY2sgd2FzIHBlcmZvcm1lZCBvbiB0aGUgZG9jdW1lbnQgYnV0XG4gKiBub3Qgb24gdGhlIGhvc3Qgb3IgY29udGFpbmVyLlxuICogKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iQ2xpY2tUcmlnZ2VyU3RyYXRlZ3kgZXh0ZW5kcyBOYlRyaWdnZXJTdHJhdGVneUJhc2Uge1xuICAgIHByb3RlY3RlZCBjbGljayQ6IE9ic2VydmFibGU8W2Jvb2xlYW4sIEV2ZW50XT47XG4gICAgcmVhZG9ubHkgc2hvdyQ6IE9ic2VydmFibGU8RXZlbnQ+O1xuICAgIHJlYWRvbmx5IGhpZGUkOiBPYnNlcnZhYmxlPEV2ZW50Pjtcbn1cbi8qKlxuICogQ3JlYXRlcyBzaG93IGFuZCBoaWRlIGV2ZW50IHN0cmVhbXMuXG4gKiBGaXJlcyBvcGVuIGV2ZW50IHdoZW4gYSBtb3VzZSBob3ZlcnMgb3ZlciB0aGUgaG9zdCBlbGVtZW50IGFuZCBzdGF5IG92ZXIgYXQgbGVhc3QgMTAwIG1pbGxpc2Vjb25kcy5cbiAqIEZpcmVzIGNsb3NlIGV2ZW50IHdoZW4gdGhlIG1vdXNlIGxlYXZlcyB0aGUgaG9zdCBlbGVtZW50IGFuZCBzdG9wcyBvdXQgb2YgdGhlIGhvc3QgYW5kIHBvcG92ZXIgY29udGFpbmVyLlxuICogKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iSG92ZXJUcmlnZ2VyU3RyYXRlZ3kgZXh0ZW5kcyBOYlRyaWdnZXJTdHJhdGVneUJhc2Uge1xuICAgIHNob3ckOiBPYnNlcnZhYmxlPEV2ZW50PjtcbiAgICBoaWRlJDogT2JzZXJ2YWJsZTxFdmVudD47XG59XG4vKipcbiAqIENyZWF0ZXMgc2hvdyBhbmQgaGlkZSBldmVudCBzdHJlYW1zLlxuICogRmlyZXMgb3BlbiBldmVudCB3aGVuIGEgbW91c2UgaG92ZXJzIG92ZXIgdGhlIGhvc3QgZWxlbWVudCBhbmQgc3RheSBvdmVyIGF0IGxlYXN0IDEwMCBtaWxsaXNlY29uZHMuXG4gKiBGaXJlcyBjbG9zZSBldmVudCB3aGVuIHRoZSBtb3VzZSBsZWF2ZXMgdGhlIGhvc3QgZWxlbWVudC5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkhpbnRUcmlnZ2VyU3RyYXRlZ3kgZXh0ZW5kcyBOYlRyaWdnZXJTdHJhdGVneUJhc2Uge1xuICAgIHNob3ckOiBPYnNlcnZhYmxlPEV2ZW50PjtcbiAgICBoaWRlJDogT2JzZXJ2YWJsZTxFdmVudD47XG59XG4vKipcbiAqIENyZWF0ZXMgc2hvdyBhbmQgaGlkZSBldmVudCBzdHJlYW1zLlxuICogRmlyZXMgb3BlbiBldmVudCB3aGVuIGEgZm9jdXMgaXMgb24gdGhlIGhvc3QgZWxlbWVudCBhbmQgc3RheSBvdmVyIGF0IGxlYXN0IDEwMCBtaWxsaXNlY29uZHMuXG4gKiBGaXJlcyBjbG9zZSBldmVudCB3aGVuIHRoZSBmb2N1cyBsZWF2ZXMgdGhlIGhvc3QgZWxlbWVudC5cbiAqICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkZvY3VzVHJpZ2dlclN0cmF0ZWd5IGV4dGVuZHMgTmJUcmlnZ2VyU3RyYXRlZ3lCYXNlIHtcbiAgICBwcm90ZWN0ZWQgZm9jdXNPdXQkOiBPYnNlcnZhYmxlPEV2ZW50PjtcbiAgICBwcm90ZWN0ZWQgY2xpY2tJbiQ6IE9ic2VydmFibGU8RXZlbnQ+O1xuICAgIHByb3RlY3RlZCBjbGlja091dCQ6IE9ic2VydmFibGU8RXZlbnQ+O1xuICAgIHByb3RlY3RlZCB0YWJLZXlQcmVzcyQ6IE9ic2VydmFibGU8RXZlbnQ+O1xuICAgIHNob3ckOiBPYnNlcnZhYmxlPEV2ZW50PjtcbiAgICBoaWRlJDogT2JzZXJ2YWJsZTxFdmVudD47XG59XG4vKipcbiAqIENyZWF0ZXMgZW1wdHkgc2hvdyBhbmQgaGlkZSBldmVudCBzdHJlYW1zLlxuICogKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iTm9vcFRyaWdnZXJTdHJhdGVneSBleHRlbmRzIE5iVHJpZ2dlclN0cmF0ZWd5QmFzZSB7XG4gICAgc2hvdyQ6IE9ic2VydmFibGU8RXZlbnQ+O1xuICAgIGhpZGUkOiBPYnNlcnZhYmxlPEV2ZW50Pjtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iVHJpZ2dlclN0cmF0ZWd5QnVpbGRlclNlcnZpY2Uge1xuICAgIHByb3RlY3RlZCBfZG9jdW1lbnQ6IGFueTtcbiAgICBwcm90ZWN0ZWQgX2hvc3Q6IEhUTUxFbGVtZW50O1xuICAgIHByb3RlY3RlZCBfY29udGFpbmVyOiAoKSA9PiBDb21wb25lbnRSZWY8YW55PjtcbiAgICBwcm90ZWN0ZWQgX3RyaWdnZXI6IE5iVHJpZ2dlcjtcbiAgICBjb25zdHJ1Y3RvcihfZG9jdW1lbnQ6IGFueSk7XG4gICAgdHJpZ2dlcih0cmlnZ2VyOiBOYlRyaWdnZXIpOiB0aGlzO1xuICAgIGhvc3QoaG9zdDogSFRNTEVsZW1lbnQpOiB0aGlzO1xuICAgIGNvbnRhaW5lcihjb250YWluZXI6ICgpID0+IENvbXBvbmVudFJlZjxhbnk+KTogdGhpcztcbiAgICBidWlsZCgpOiBOYlRyaWdnZXJTdHJhdGVneTtcbn1cbiJdfQ==