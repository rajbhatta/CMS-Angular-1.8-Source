/**
 * List is a container component that wraps `nb-list-item` component.
 *
 * Basic example:
 * @stacked-example(Simple list, list/simple-list-showcase.component)
 *
 * `nb-list-item` accepts arbitrary content, so you can create a list of any components.
 *
 * ### Installation
 *
 * Import `NbListModule` to your feature module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbListModule,
 *   ],
 * })
 * export class PageModule { }
 * ```
 * ### Usage
 *
 * List of users:
 * @stacked-example(Users list, list/users-list-showcase.component)
 *
 * @styles
 *
 * list-item-divider-color:
 * list-item-divider-style:
 * list-item-divider-width:
 * list-item-padding:
 * list-item-text-color:
 * list-item-font-family:
 * list-item-font-size:
 * list-item-font-weight:
 * list-item-line-height:
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbListComponent {
    /**
     * Role attribute value
     *
     * @type {string}
     */
    role: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbListComponent, "nb-list", never, { "role": "role"; }, {}, never, ["nb-list-item"]>;
}
/**
 * List item component is a grouping component that accepts arbitrary content.
 * It should be direct child of `nb-list` componet.
 */
export declare class NbListItemComponent {
    /**
     * Role attribute value
     *
     * @type {string}
     */
    role: string;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbListItemComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbListItemComponent, "nb-list-item", never, { "role": "role"; }, {}, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC5jb21wb25lbnQuZC50cyIsInNvdXJjZXMiOlsibGlzdC5jb21wb25lbnQuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogTGlzdCBpcyBhIGNvbnRhaW5lciBjb21wb25lbnQgdGhhdCB3cmFwcyBgbmItbGlzdC1pdGVtYCBjb21wb25lbnQuXG4gKlxuICogQmFzaWMgZXhhbXBsZTpcbiAqIEBzdGFja2VkLWV4YW1wbGUoU2ltcGxlIGxpc3QsIGxpc3Qvc2ltcGxlLWxpc3Qtc2hvd2Nhc2UuY29tcG9uZW50KVxuICpcbiAqIGBuYi1saXN0LWl0ZW1gIGFjY2VwdHMgYXJiaXRyYXJ5IGNvbnRlbnQsIHNvIHlvdSBjYW4gY3JlYXRlIGEgbGlzdCBvZiBhbnkgY29tcG9uZW50cy5cbiAqXG4gKiAjIyMgSW5zdGFsbGF0aW9uXG4gKlxuICogSW1wb3J0IGBOYkxpc3RNb2R1bGVgIHRvIHlvdXIgZmVhdHVyZSBtb2R1bGUuXG4gKiBgYGB0c1xuICogQE5nTW9kdWxlKHtcbiAqICAgaW1wb3J0czogW1xuICogICAgIC8vIC4uLlxuICogICAgIE5iTGlzdE1vZHVsZSxcbiAqICAgXSxcbiAqIH0pXG4gKiBleHBvcnQgY2xhc3MgUGFnZU1vZHVsZSB7IH1cbiAqIGBgYFxuICogIyMjIFVzYWdlXG4gKlxuICogTGlzdCBvZiB1c2VyczpcbiAqIEBzdGFja2VkLWV4YW1wbGUoVXNlcnMgbGlzdCwgbGlzdC91c2Vycy1saXN0LXNob3djYXNlLmNvbXBvbmVudClcbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogbGlzdC1pdGVtLWRpdmlkZXItY29sb3I6XG4gKiBsaXN0LWl0ZW0tZGl2aWRlci1zdHlsZTpcbiAqIGxpc3QtaXRlbS1kaXZpZGVyLXdpZHRoOlxuICogbGlzdC1pdGVtLXBhZGRpbmc6XG4gKiBsaXN0LWl0ZW0tdGV4dC1jb2xvcjpcbiAqIGxpc3QtaXRlbS1mb250LWZhbWlseTpcbiAqIGxpc3QtaXRlbS1mb250LXNpemU6XG4gKiBsaXN0LWl0ZW0tZm9udC13ZWlnaHQ6XG4gKiBsaXN0LWl0ZW0tbGluZS1oZWlnaHQ6XG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iTGlzdENvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogUm9sZSBhdHRyaWJ1dGUgdmFsdWVcbiAgICAgKlxuICAgICAqIEB0eXBlIHtzdHJpbmd9XG4gICAgICovXG4gICAgcm9sZTogc3RyaW5nO1xufVxuLyoqXG4gKiBMaXN0IGl0ZW0gY29tcG9uZW50IGlzIGEgZ3JvdXBpbmcgY29tcG9uZW50IHRoYXQgYWNjZXB0cyBhcmJpdHJhcnkgY29udGVudC5cbiAqIEl0IHNob3VsZCBiZSBkaXJlY3QgY2hpbGQgb2YgYG5iLWxpc3RgIGNvbXBvbmV0LlxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkxpc3RJdGVtQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBSb2xlIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAqXG4gICAgICogQHR5cGUge3N0cmluZ31cbiAgICAgKi9cbiAgICByb2xlOiBzdHJpbmc7XG59XG4iXX0=