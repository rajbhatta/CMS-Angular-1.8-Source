import { QueryList, ElementRef, AfterViewInit, OnDestroy, EventEmitter } from '@angular/core';
import 'intersection-observer';
/**
 * List pager directive
 *
 * Directive allows you to determine page of currently viewing items.
 *
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbListPageTrackerDirective implements AfterViewInit, OnDestroy {
    private destroy$;
    private observer;
    private currentPage;
    /**
     * Items per page.
     */
    pageSize: number;
    /**
     * Page to start counting with.
     */
    startPage: number;
    /**
     * Emits when another page become visible.
     */
    pageChange: EventEmitter<number>;
    listItems: QueryList<ElementRef>;
    constructor();
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    private observeItems;
    private checkForPageChange;
    private findMostVisiblePage;
    private elementIndex;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbListPageTrackerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<NbListPageTrackerDirective, "[nbListPageTracker]", never, { "startPage": "startPage"; "pageSize": "pageSize"; }, { "pageChange": "pageChange"; }, ["listItems"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGlzdC1wYWdlLXRyYWNrZXIuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImxpc3QtcGFnZS10cmFja2VyLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiwgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCAnaW50ZXJzZWN0aW9uLW9ic2VydmVyJztcbi8qKlxuICogTGlzdCBwYWdlciBkaXJlY3RpdmVcbiAqXG4gKiBEaXJlY3RpdmUgYWxsb3dzIHlvdSB0byBkZXRlcm1pbmUgcGFnZSBvZiBjdXJyZW50bHkgdmlld2luZyBpdGVtcy5cbiAqXG4gKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iTGlzdFBhZ2VUcmFja2VyRGlyZWN0aXZlIGltcGxlbWVudHMgQWZ0ZXJWaWV3SW5pdCwgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGRlc3Ryb3kkO1xuICAgIHByaXZhdGUgb2JzZXJ2ZXI7XG4gICAgcHJpdmF0ZSBjdXJyZW50UGFnZTtcbiAgICAvKipcbiAgICAgKiBJdGVtcyBwZXIgcGFnZS5cbiAgICAgKi9cbiAgICBwYWdlU2l6ZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIFBhZ2UgdG8gc3RhcnQgY291bnRpbmcgd2l0aC5cbiAgICAgKi9cbiAgICBzdGFydFBhZ2U6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBFbWl0cyB3aGVuIGFub3RoZXIgcGFnZSBiZWNvbWUgdmlzaWJsZS5cbiAgICAgKi9cbiAgICBwYWdlQ2hhbmdlOiBFdmVudEVtaXR0ZXI8bnVtYmVyPjtcbiAgICBsaXN0SXRlbXM6IFF1ZXJ5TGlzdDxFbGVtZW50UmVmPjtcbiAgICBjb25zdHJ1Y3RvcigpO1xuICAgIG5nQWZ0ZXJWaWV3SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSBvYnNlcnZlSXRlbXM7XG4gICAgcHJpdmF0ZSBjaGVja0ZvclBhZ2VDaGFuZ2U7XG4gICAgcHJpdmF0ZSBmaW5kTW9zdFZpc2libGVQYWdlO1xuICAgIHByaXZhdGUgZWxlbWVudEluZGV4O1xufVxuIl19