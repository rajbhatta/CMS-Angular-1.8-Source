import { AfterContentInit, EventEmitter, OnDestroy, QueryList, ElementRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { Subject } from 'rxjs';
import { NbBooleanInput } from '../helpers';
import { NbRadioComponent } from './radio.component';
import { NbComponentStatus } from '../component-status';
/**
 * The `NbRadioGroupComponent` is the wrapper for `nb-radio` button.
 * It provides form bindings:
 *
 * ```html
 * <nb-radio-group [(ngModel)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Also, you can use `value` and `valueChange` for binding without forms.
 *
 * ```html
 * <nb-radio-group [(value)]="selectedOption">
 *   <nb-radio value="1">Option 1</nb-radio>
 *   <nb-radio value="2">Option 2</nb-radio>
 *   <nb-radio value="3">Option 3</nb-radio>
 * </nb-radio-group>
 * ```
 *
 * Radio items name has to be provided through `name` input property of the radio group.
 *
 * ```html
 * <nb-radio-group name="my-radio-group">
 *   ...
 * </nb-radio-group>
 * ```
 *
 * You can change radio group status by setting `status` input.
 * @stacked-example(Statuses, radio/radio-statuses.component)
 *
 * Also, you can disable the whole group using `disabled` attribute.
 * @stacked-example(Disabled group, radio/radio-disabled-group.component)
 *
 * */
import * as ɵngcc0 from '@angular/core';
export declare class NbRadioGroupComponent implements AfterContentInit, OnDestroy, ControlValueAccessor {
    protected hostElement: ElementRef<HTMLElement>;
    protected platformId: any;
    protected document: any;
    protected destroy$: Subject<void>;
    protected onChange: (value: any) => void;
    protected onTouched: () => void;
    get value(): any;
    set value(value: any);
    protected _value: any;
    get name(): string;
    set name(name: string);
    protected _name: string;
    get disabled(): boolean;
    set disabled(disabled: boolean);
    protected _disabled: boolean;
    static ngAcceptInputType_disabled: NbBooleanInput;
    /**
     * Radio buttons status.
     * Possible values are `primary` (default), `success`, `warning`, `danger`, `info`.
     */
    get status(): NbComponentStatus;
    set status(value: NbComponentStatus);
    protected _status: NbComponentStatus;
    radios: QueryList<NbRadioComponent>;
    valueChange: EventEmitter<any>;
    constructor(hostElement: ElementRef<HTMLElement>, platformId: any, document: any);
    ngAfterContentInit(): void;
    ngOnDestroy(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    writeValue(value: any): void;
    protected updateAndSubscribeToRadios(): void;
    protected updateNames(): void;
    protected updateValues(): void;
    protected updateDisabled(): void;
    protected subscribeOnRadiosValueChange(): void;
    protected propagateValue(value: any): void;
    protected subscribeOnRadiosBlur(): void;
    protected updateStatus(): void;
    protected updateAndMarkForCheckRadios(updateFn: (NbRadioComponent: any) => void): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbRadioGroupComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbRadioGroupComponent, "nb-radio-group", never, { "value": "value"; "name": "name"; "disabled": "disabled"; "status": "status"; }, { "valueChange": "valueChange"; }, ["radios"], ["nb-radio"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmFkaW8tZ3JvdXAuY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbInJhZGlvLWdyb3VwLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQWZ0ZXJDb250ZW50SW5pdCwgRXZlbnRFbWl0dGVyLCBPbkRlc3Ryb3ksIFF1ZXJ5TGlzdCwgRWxlbWVudFJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udHJvbFZhbHVlQWNjZXNzb3IgfSBmcm9tICdAYW5ndWxhci9mb3Jtcyc7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBOYkJvb2xlYW5JbnB1dCB9IGZyb20gJy4uL2hlbHBlcnMnO1xuaW1wb3J0IHsgTmJSYWRpb0NvbXBvbmVudCB9IGZyb20gJy4vcmFkaW8uY29tcG9uZW50JztcbmltcG9ydCB7IE5iQ29tcG9uZW50U3RhdHVzIH0gZnJvbSAnLi4vY29tcG9uZW50LXN0YXR1cyc7XG4vKipcbiAqIFRoZSBgTmJSYWRpb0dyb3VwQ29tcG9uZW50YCBpcyB0aGUgd3JhcHBlciBmb3IgYG5iLXJhZGlvYCBidXR0b24uXG4gKiBJdCBwcm92aWRlcyBmb3JtIGJpbmRpbmdzOlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuYi1yYWRpby1ncm91cCBbKG5nTW9kZWwpXT1cInNlbGVjdGVkT3B0aW9uXCI+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjFcIj5PcHRpb24gMTwvbmItcmFkaW8+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjJcIj5PcHRpb24gMjwvbmItcmFkaW8+XG4gKiAgIDxuYi1yYWRpbyB2YWx1ZT1cIjNcIj5PcHRpb24gMzwvbmItcmFkaW8+XG4gKiA8L25iLXJhZGlvLWdyb3VwPlxuICogYGBgXG4gKlxuICogQWxzbywgeW91IGNhbiB1c2UgYHZhbHVlYCBhbmQgYHZhbHVlQ2hhbmdlYCBmb3IgYmluZGluZyB3aXRob3V0IGZvcm1zLlxuICpcbiAqIGBgYGh0bWxcbiAqIDxuYi1yYWRpby1ncm91cCBbKHZhbHVlKV09XCJzZWxlY3RlZE9wdGlvblwiPlxuICogICA8bmItcmFkaW8gdmFsdWU9XCIxXCI+T3B0aW9uIDE8L25iLXJhZGlvPlxuICogICA8bmItcmFkaW8gdmFsdWU9XCIyXCI+T3B0aW9uIDI8L25iLXJhZGlvPlxuICogICA8bmItcmFkaW8gdmFsdWU9XCIzXCI+T3B0aW9uIDM8L25iLXJhZGlvPlxuICogPC9uYi1yYWRpby1ncm91cD5cbiAqIGBgYFxuICpcbiAqIFJhZGlvIGl0ZW1zIG5hbWUgaGFzIHRvIGJlIHByb3ZpZGVkIHRocm91Z2ggYG5hbWVgIGlucHV0IHByb3BlcnR5IG9mIHRoZSByYWRpbyBncm91cC5cbiAqXG4gKiBgYGBodG1sXG4gKiA8bmItcmFkaW8tZ3JvdXAgbmFtZT1cIm15LXJhZGlvLWdyb3VwXCI+XG4gKiAgIC4uLlxuICogPC9uYi1yYWRpby1ncm91cD5cbiAqIGBgYFxuICpcbiAqIFlvdSBjYW4gY2hhbmdlIHJhZGlvIGdyb3VwIHN0YXR1cyBieSBzZXR0aW5nIGBzdGF0dXNgIGlucHV0LlxuICogQHN0YWNrZWQtZXhhbXBsZShTdGF0dXNlcywgcmFkaW8vcmFkaW8tc3RhdHVzZXMuY29tcG9uZW50KVxuICpcbiAqIEFsc28sIHlvdSBjYW4gZGlzYWJsZSB0aGUgd2hvbGUgZ3JvdXAgdXNpbmcgYGRpc2FibGVkYCBhdHRyaWJ1dGUuXG4gKiBAc3RhY2tlZC1leGFtcGxlKERpc2FibGVkIGdyb3VwLCByYWRpby9yYWRpby1kaXNhYmxlZC1ncm91cC5jb21wb25lbnQpXG4gKlxuICogKi9cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIE5iUmFkaW9Hcm91cENvbXBvbmVudCBpbXBsZW1lbnRzIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSwgQ29udHJvbFZhbHVlQWNjZXNzb3Ige1xuICAgIHByb3RlY3RlZCBob3N0RWxlbWVudDogRWxlbWVudFJlZjxIVE1MRWxlbWVudD47XG4gICAgcHJvdGVjdGVkIHBsYXRmb3JtSWQ6IGFueTtcbiAgICBwcm90ZWN0ZWQgZG9jdW1lbnQ6IGFueTtcbiAgICBwcm90ZWN0ZWQgZGVzdHJveSQ6IFN1YmplY3Q8dm9pZD47XG4gICAgcHJvdGVjdGVkIG9uQ2hhbmdlOiAodmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgICBwcm90ZWN0ZWQgb25Ub3VjaGVkOiAoKSA9PiB2b2lkO1xuICAgIGdldCB2YWx1ZSgpOiBhbnk7XG4gICAgc2V0IHZhbHVlKHZhbHVlOiBhbnkpO1xuICAgIHByb3RlY3RlZCBfdmFsdWU6IGFueTtcbiAgICBnZXQgbmFtZSgpOiBzdHJpbmc7XG4gICAgc2V0IG5hbWUobmFtZTogc3RyaW5nKTtcbiAgICBwcm90ZWN0ZWQgX25hbWU6IHN0cmluZztcbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZGlzYWJsZWQoZGlzYWJsZWQ6IGJvb2xlYW4pO1xuICAgIHByb3RlY3RlZCBfZGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2Rpc2FibGVkOiBOYkJvb2xlYW5JbnB1dDtcbiAgICAvKipcbiAgICAgKiBSYWRpbyBidXR0b25zIHN0YXR1cy5cbiAgICAgKiBQb3NzaWJsZSB2YWx1ZXMgYXJlIGBwcmltYXJ5YCAoZGVmYXVsdCksIGBzdWNjZXNzYCwgYHdhcm5pbmdgLCBgZGFuZ2VyYCwgYGluZm9gLlxuICAgICAqL1xuICAgIGdldCBzdGF0dXMoKTogTmJDb21wb25lbnRTdGF0dXM7XG4gICAgc2V0IHN0YXR1cyh2YWx1ZTogTmJDb21wb25lbnRTdGF0dXMpO1xuICAgIHByb3RlY3RlZCBfc3RhdHVzOiBOYkNvbXBvbmVudFN0YXR1cztcbiAgICByYWRpb3M6IFF1ZXJ5TGlzdDxOYlJhZGlvQ29tcG9uZW50PjtcbiAgICB2YWx1ZUNoYW5nZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29uc3RydWN0b3IoaG9zdEVsZW1lbnQ6IEVsZW1lbnRSZWY8SFRNTEVsZW1lbnQ+LCBwbGF0Zm9ybUlkOiBhbnksIGRvY3VtZW50OiBhbnkpO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgcmVnaXN0ZXJPbkNoYW5nZShmbjogYW55KTogdm9pZDtcbiAgICByZWdpc3Rlck9uVG91Y2hlZChmbjogYW55KTogdm9pZDtcbiAgICB3cml0ZVZhbHVlKHZhbHVlOiBhbnkpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVBbmRTdWJzY3JpYmVUb1JhZGlvcygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVOYW1lcygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVWYWx1ZXMoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgdXBkYXRlRGlzYWJsZWQoKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlT25SYWRpb3NWYWx1ZUNoYW5nZSgpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBwcm9wYWdhdGVWYWx1ZSh2YWx1ZTogYW55KTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc3Vic2NyaWJlT25SYWRpb3NCbHVyKCk6IHZvaWQ7XG4gICAgcHJvdGVjdGVkIHVwZGF0ZVN0YXR1cygpOiB2b2lkO1xuICAgIHByb3RlY3RlZCB1cGRhdGVBbmRNYXJrRm9yQ2hlY2tSYWRpb3ModXBkYXRlRm46IChOYlJhZGlvQ29tcG9uZW50OiBhbnkpID0+IHZvaWQpOiB2b2lkO1xufVxuIl19