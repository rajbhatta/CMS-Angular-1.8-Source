import { ComponentFactoryResolver, ComponentRef, TemplateRef, ViewContainerRef } from '@angular/core';
import { NbComponentType, NbOverlayPositionBuilder, NbOverlayRef } from '../cdk/overlay/mapping';
import { NbOverlayService } from '../cdk/overlay/overlay-service';
import { NbBlockScrollStrategyAdapter } from '../cdk/adapter/block-scroll-strategy-adapter';
import { NbWindowConfig } from './window.options';
import { NbWindowRef } from './window-ref';
import { NbWindowComponent } from './window.component';
/**
 * The `NbWindowService` can be used to open windows.
 *
 * @stacked-example(Showcase, window/window-showcase.component)
 *
 * ### Installation
 *
 * Import `NbWindowModule` to your app module.
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbWindowModule.forRoot(config),
 *   ],
 * })
 * export class AppModule { }
 * ```
 *
 * If you are using it in a lazy loaded module than you have to install `NbWindowModule.forChild`:
 * ```ts
 * @NgModule({
 *   imports: [
 *     // ...
 *     NbWindowModule.forChild(config),
 *   ],
 * })
 * export class LazyLoadedModule { }
 * ```
 *
 * ### Usage
 *
 * A new window can be opened by calling the `open` method with a component or template to be loaded
 * and an optional configuration.
 * `open` method will return `NbWindowRef` that can be used for the further manipulations.
 *
 * ```ts
 * const windowRef = this.windowService.open(MyComponent, { ... });
 * ```
 *
 * `NbWindowRef` gives you ability manipulate opened window.
 * Also, you can inject `NbWindowRef` inside provided component which rendered in window.
 *
 * ```ts
 * this.windowService.open(MyWindowComponent, { ... });
 *
 * // my.component.ts
 * constructor(protected windowRef: NbWindowRef) {
 * }
 *
 * minimize() {
 *   this.windowRef.minimize();
 * }
 *
 * close() {
 *   this.windowRef.close();
 * }
 * ```
 *
 * Instead of component you can create window from TemplateRef. As usual you can access context provided via config
 * via `let-` variables. Also you can get reference to the `NbWindowRef` in context's `windowRef` property.
 *
 * @stacked-example(Window content from TemplateRef, window/template-window.component)
 *
 * ### Configuration
 *
 * As mentioned above, `open` method of the `NbWindowService` may receive optional configuration options.
 * Also, you can modify default windows configuration through `NbWindowModule.forRoot({ ... })`.
 * You can read about all available options on [API tab](docs/components/window/api#nbwindowconfig).
 *
 * @stacked-example(Configuration, window/windows-backdrop.component)
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbWindowService {
    protected componentFactoryResolver: ComponentFactoryResolver;
    protected overlayService: NbOverlayService;
    protected overlayPositionBuilder: NbOverlayPositionBuilder;
    protected blockScrollStrategy: NbBlockScrollStrategyAdapter;
    protected readonly defaultWindowsConfig: NbWindowConfig;
    protected cfr: ComponentFactoryResolver;
    protected document: Document;
    protected overlayRef: NbOverlayRef;
    protected windowsContainerViewRef: ViewContainerRef;
    protected openWindows: NbWindowRef[];
    constructor(componentFactoryResolver: ComponentFactoryResolver, overlayService: NbOverlayService, overlayPositionBuilder: NbOverlayPositionBuilder, blockScrollStrategy: NbBlockScrollStrategyAdapter, defaultWindowsConfig: NbWindowConfig, cfr: ComponentFactoryResolver, document: any);
    /**
     * Opens new window.
     * @param windowContent
     * @param windowConfig
     * */
    open(windowContent: TemplateRef<any> | NbComponentType, windowConfig?: Partial<NbWindowConfig>): NbWindowRef;
    protected shouldCreateWindowsContainer(): boolean;
    protected createWindowsContainer(): void;
    protected appendWindow(content: TemplateRef<any> | NbComponentType, config: NbWindowConfig, windowRef: NbWindowRef): ComponentRef<NbWindowComponent>;
    protected subscribeToEvents(windowRef: NbWindowRef): void;
    protected checkAndUpdateOverlay(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbWindowService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<NbWindowService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid2luZG93LnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsid2luZG93LnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIENvbXBvbmVudFJlZiwgVGVtcGxhdGVSZWYsIFZpZXdDb250YWluZXJSZWYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5iQ29tcG9uZW50VHlwZSwgTmJPdmVybGF5UG9zaXRpb25CdWlsZGVyLCBOYk92ZXJsYXlSZWYgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9tYXBwaW5nJztcbmltcG9ydCB7IE5iT3ZlcmxheVNlcnZpY2UgfSBmcm9tICcuLi9jZGsvb3ZlcmxheS9vdmVybGF5LXNlcnZpY2UnO1xuaW1wb3J0IHsgTmJCbG9ja1Njcm9sbFN0cmF0ZWd5QWRhcHRlciB9IGZyb20gJy4uL2Nkay9hZGFwdGVyL2Jsb2NrLXNjcm9sbC1zdHJhdGVneS1hZGFwdGVyJztcbmltcG9ydCB7IE5iV2luZG93Q29uZmlnIH0gZnJvbSAnLi93aW5kb3cub3B0aW9ucyc7XG5pbXBvcnQgeyBOYldpbmRvd1JlZiB9IGZyb20gJy4vd2luZG93LXJlZic7XG5pbXBvcnQgeyBOYldpbmRvd0NvbXBvbmVudCB9IGZyb20gJy4vd2luZG93LmNvbXBvbmVudCc7XG4vKipcbiAqIFRoZSBgTmJXaW5kb3dTZXJ2aWNlYCBjYW4gYmUgdXNlZCB0byBvcGVuIHdpbmRvd3MuXG4gKlxuICogQHN0YWNrZWQtZXhhbXBsZShTaG93Y2FzZSwgd2luZG93L3dpbmRvdy1zaG93Y2FzZS5jb21wb25lbnQpXG4gKlxuICogIyMjIEluc3RhbGxhdGlvblxuICpcbiAqIEltcG9ydCBgTmJXaW5kb3dNb2R1bGVgIHRvIHlvdXIgYXBwIG1vZHVsZS5cbiAqIGBgYHRzXG4gKiBATmdNb2R1bGUoe1xuICogICBpbXBvcnRzOiBbXG4gKiAgICAgLy8gLi4uXG4gKiAgICAgTmJXaW5kb3dNb2R1bGUuZm9yUm9vdChjb25maWcpLFxuICogICBdLFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBBcHBNb2R1bGUgeyB9XG4gKiBgYGBcbiAqXG4gKiBJZiB5b3UgYXJlIHVzaW5nIGl0IGluIGEgbGF6eSBsb2FkZWQgbW9kdWxlIHRoYW4geW91IGhhdmUgdG8gaW5zdGFsbCBgTmJXaW5kb3dNb2R1bGUuZm9yQ2hpbGRgOlxuICogYGBgdHNcbiAqIEBOZ01vZHVsZSh7XG4gKiAgIGltcG9ydHM6IFtcbiAqICAgICAvLyAuLi5cbiAqICAgICBOYldpbmRvd01vZHVsZS5mb3JDaGlsZChjb25maWcpLFxuICogICBdLFxuICogfSlcbiAqIGV4cG9ydCBjbGFzcyBMYXp5TG9hZGVkTW9kdWxlIHsgfVxuICogYGBgXG4gKlxuICogIyMjIFVzYWdlXG4gKlxuICogQSBuZXcgd2luZG93IGNhbiBiZSBvcGVuZWQgYnkgY2FsbGluZyB0aGUgYG9wZW5gIG1ldGhvZCB3aXRoIGEgY29tcG9uZW50IG9yIHRlbXBsYXRlIHRvIGJlIGxvYWRlZFxuICogYW5kIGFuIG9wdGlvbmFsIGNvbmZpZ3VyYXRpb24uXG4gKiBgb3BlbmAgbWV0aG9kIHdpbGwgcmV0dXJuIGBOYldpbmRvd1JlZmAgdGhhdCBjYW4gYmUgdXNlZCBmb3IgdGhlIGZ1cnRoZXIgbWFuaXB1bGF0aW9ucy5cbiAqXG4gKiBgYGB0c1xuICogY29uc3Qgd2luZG93UmVmID0gdGhpcy53aW5kb3dTZXJ2aWNlLm9wZW4oTXlDb21wb25lbnQsIHsgLi4uIH0pO1xuICogYGBgXG4gKlxuICogYE5iV2luZG93UmVmYCBnaXZlcyB5b3UgYWJpbGl0eSBtYW5pcHVsYXRlIG9wZW5lZCB3aW5kb3cuXG4gKiBBbHNvLCB5b3UgY2FuIGluamVjdCBgTmJXaW5kb3dSZWZgIGluc2lkZSBwcm92aWRlZCBjb21wb25lbnQgd2hpY2ggcmVuZGVyZWQgaW4gd2luZG93LlxuICpcbiAqIGBgYHRzXG4gKiB0aGlzLndpbmRvd1NlcnZpY2Uub3BlbihNeVdpbmRvd0NvbXBvbmVudCwgeyAuLi4gfSk7XG4gKlxuICogLy8gbXkuY29tcG9uZW50LnRzXG4gKiBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgd2luZG93UmVmOiBOYldpbmRvd1JlZikge1xuICogfVxuICpcbiAqIG1pbmltaXplKCkge1xuICogICB0aGlzLndpbmRvd1JlZi5taW5pbWl6ZSgpO1xuICogfVxuICpcbiAqIGNsb3NlKCkge1xuICogICB0aGlzLndpbmRvd1JlZi5jbG9zZSgpO1xuICogfVxuICogYGBgXG4gKlxuICogSW5zdGVhZCBvZiBjb21wb25lbnQgeW91IGNhbiBjcmVhdGUgd2luZG93IGZyb20gVGVtcGxhdGVSZWYuIEFzIHVzdWFsIHlvdSBjYW4gYWNjZXNzIGNvbnRleHQgcHJvdmlkZWQgdmlhIGNvbmZpZ1xuICogdmlhIGBsZXQtYCB2YXJpYWJsZXMuIEFsc28geW91IGNhbiBnZXQgcmVmZXJlbmNlIHRvIHRoZSBgTmJXaW5kb3dSZWZgIGluIGNvbnRleHQncyBgd2luZG93UmVmYCBwcm9wZXJ0eS5cbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKFdpbmRvdyBjb250ZW50IGZyb20gVGVtcGxhdGVSZWYsIHdpbmRvdy90ZW1wbGF0ZS13aW5kb3cuY29tcG9uZW50KVxuICpcbiAqICMjIyBDb25maWd1cmF0aW9uXG4gKlxuICogQXMgbWVudGlvbmVkIGFib3ZlLCBgb3BlbmAgbWV0aG9kIG9mIHRoZSBgTmJXaW5kb3dTZXJ2aWNlYCBtYXkgcmVjZWl2ZSBvcHRpb25hbCBjb25maWd1cmF0aW9uIG9wdGlvbnMuXG4gKiBBbHNvLCB5b3UgY2FuIG1vZGlmeSBkZWZhdWx0IHdpbmRvd3MgY29uZmlndXJhdGlvbiB0aHJvdWdoIGBOYldpbmRvd01vZHVsZS5mb3JSb290KHsgLi4uIH0pYC5cbiAqIFlvdSBjYW4gcmVhZCBhYm91dCBhbGwgYXZhaWxhYmxlIG9wdGlvbnMgb24gW0FQSSB0YWJdKGRvY3MvY29tcG9uZW50cy93aW5kb3cvYXBpI25id2luZG93Y29uZmlnKS5cbiAqXG4gKiBAc3RhY2tlZC1leGFtcGxlKENvbmZpZ3VyYXRpb24sIHdpbmRvdy93aW5kb3dzLWJhY2tkcm9wLmNvbXBvbmVudClcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJXaW5kb3dTZXJ2aWNlIHtcbiAgICBwcm90ZWN0ZWQgY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG4gICAgcHJvdGVjdGVkIG92ZXJsYXlTZXJ2aWNlOiBOYk92ZXJsYXlTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBvdmVybGF5UG9zaXRpb25CdWlsZGVyOiBOYk92ZXJsYXlQb3NpdGlvbkJ1aWxkZXI7XG4gICAgcHJvdGVjdGVkIGJsb2NrU2Nyb2xsU3RyYXRlZ3k6IE5iQmxvY2tTY3JvbGxTdHJhdGVneUFkYXB0ZXI7XG4gICAgcHJvdGVjdGVkIHJlYWRvbmx5IGRlZmF1bHRXaW5kb3dzQ29uZmlnOiBOYldpbmRvd0NvbmZpZztcbiAgICBwcm90ZWN0ZWQgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXI7XG4gICAgcHJvdGVjdGVkIGRvY3VtZW50OiBEb2N1bWVudDtcbiAgICBwcm90ZWN0ZWQgb3ZlcmxheVJlZjogTmJPdmVybGF5UmVmO1xuICAgIHByb3RlY3RlZCB3aW5kb3dzQ29udGFpbmVyVmlld1JlZjogVmlld0NvbnRhaW5lclJlZjtcbiAgICBwcm90ZWN0ZWQgb3BlbldpbmRvd3M6IE5iV2luZG93UmVmW107XG4gICAgY29uc3RydWN0b3IoY29tcG9uZW50RmFjdG9yeVJlc29sdmVyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIG92ZXJsYXlTZXJ2aWNlOiBOYk92ZXJsYXlTZXJ2aWNlLCBvdmVybGF5UG9zaXRpb25CdWlsZGVyOiBOYk92ZXJsYXlQb3NpdGlvbkJ1aWxkZXIsIGJsb2NrU2Nyb2xsU3RyYXRlZ3k6IE5iQmxvY2tTY3JvbGxTdHJhdGVneUFkYXB0ZXIsIGRlZmF1bHRXaW5kb3dzQ29uZmlnOiBOYldpbmRvd0NvbmZpZywgY2ZyOiBDb21wb25lbnRGYWN0b3J5UmVzb2x2ZXIsIGRvY3VtZW50OiBhbnkpO1xuICAgIC8qKlxuICAgICAqIE9wZW5zIG5ldyB3aW5kb3cuXG4gICAgICogQHBhcmFtIHdpbmRvd0NvbnRlbnRcbiAgICAgKiBAcGFyYW0gd2luZG93Q29uZmlnXG4gICAgICogKi9cbiAgICBvcGVuKHdpbmRvd0NvbnRlbnQ6IFRlbXBsYXRlUmVmPGFueT4gfCBOYkNvbXBvbmVudFR5cGUsIHdpbmRvd0NvbmZpZz86IFBhcnRpYWw8TmJXaW5kb3dDb25maWc+KTogTmJXaW5kb3dSZWY7XG4gICAgcHJvdGVjdGVkIHNob3VsZENyZWF0ZVdpbmRvd3NDb250YWluZXIoKTogYm9vbGVhbjtcbiAgICBwcm90ZWN0ZWQgY3JlYXRlV2luZG93c0NvbnRhaW5lcigpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBhcHBlbmRXaW5kb3coY29udGVudDogVGVtcGxhdGVSZWY8YW55PiB8IE5iQ29tcG9uZW50VHlwZSwgY29uZmlnOiBOYldpbmRvd0NvbmZpZywgd2luZG93UmVmOiBOYldpbmRvd1JlZik6IENvbXBvbmVudFJlZjxOYldpbmRvd0NvbXBvbmVudD47XG4gICAgcHJvdGVjdGVkIHN1YnNjcmliZVRvRXZlbnRzKHdpbmRvd1JlZjogTmJXaW5kb3dSZWYpOiB2b2lkO1xuICAgIHByb3RlY3RlZCBjaGVja0FuZFVwZGF0ZU92ZXJsYXkoKTogdm9pZDtcbn1cbiJdfQ==