import { ChangeDetectorRef, ElementRef, EventEmitter, OnDestroy, AfterViewInit, NgZone, Renderer2 } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { NbBooleanInput } from '../helpers';
import { NbFocusableOption } from '../cdk/a11y/focus-key-manager';
import { NbHighlightableOption } from '../cdk/a11y/descendant-key-manager';
import { NbSelectComponent } from '../select/select.component';
/**
 * NbOptionComponent
 *
 * @styles
 *
 * option-background-color:
 * option-text-color:
 * option-text-font-family:
 * option-hover-background-color:
 * option-hover-text-color:
 * option-active-background-color:
 * option-active-text-color:
 * option-focus-background-color:
 * option-focus-text-color:
 * option-selected-background-color:
 * option-selected-text-color:
 * option-selected-hover-background-color:
 * option-selected-hover-text-color:
 * option-selected-active-background-color:
 * option-selected-active-text-color:
 * option-selected-focus-background-color:
 * option-selected-focus-text-color:
 * option-disabled-background-color:
 * option-disabled-text-color:
 * option-tiny-text-font-size:
 * option-tiny-text-font-weight:
 * option-tiny-text-line-height:
 * option-tiny-padding:
 * option-small-text-font-size:
 * option-small-text-font-weight:
 * option-small-text-line-height:
 * option-small-padding:
 * option-medium-text-font-size:
 * option-medium-text-font-weight:
 * option-medium-text-line-height:
 * option-medium-padding:
 * option-large-text-font-size:
 * option-large-text-font-weight:
 * option-large-text-line-height:
 * option-large-padding:
 * option-giant-text-font-size:
 * option-giant-text-font-weight:
 * option-giant-text-line-height:
 * option-giant-padding:
 **/
import * as ɵngcc0 from '@angular/core';
export declare class NbOptionComponent<T = any> implements OnDestroy, AfterViewInit, NbFocusableOption, NbHighlightableOption {
    protected elementRef: ElementRef;
    protected cd: ChangeDetectorRef;
    protected zone: NgZone;
    protected renderer: Renderer2;
    protected disabledByGroup: boolean;
    /**
     * Option value that will be fired on selection.
     * */
    value: T;
    get disabled(): boolean;
    set disabled(value: boolean);
    protected _disabled: boolean;
    static ngAcceptInputType_disabled: NbBooleanInput;
    /**
     * Fires value when option selection change.
     * */
    selectionChange: EventEmitter<NbOptionComponent<T>>;
    /**
     * Fires when option clicked
     */
    protected click$: Subject<NbOptionComponent<T>>;
    get click(): Observable<NbOptionComponent<T>>;
    selected: boolean;
    protected parent: NbSelectComponent;
    protected alive: boolean;
    /**
     * Component scoped id for aria attributes.
     * */
    id: string;
    constructor(parent: any, elementRef: ElementRef, cd: ChangeDetectorRef, zone: NgZone, renderer: Renderer2);
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
    /**
     * Determines should we render checkbox.
     * */
    get withCheckbox(): boolean;
    get content(): any;
    get multiple(): boolean;
    get selectedClass(): boolean;
    get disabledAttribute(): '' | null;
    get tabindex(): string;
    get activeClass(): boolean;
    protected _active: boolean;
    onClick(event: any): void;
    select(): void;
    deselect(): void;
    /**
     * Sets disabled by group state and marks component for check.
     */
    setDisabledByGroupState(disabled: boolean): void;
    protected setSelection(selected: boolean): void;
    focus(): void;
    getLabel(): string;
    setActiveStyles(): void;
    setInactiveStyles(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbOptionComponent<any>, [{ optional: true; }, null, null, null, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbOptionComponent<any>, "nb-option", never, { "disabled": "disabled"; "value": "value"; }, { "selectionChange": "selectionChange"; }, never, ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3B0aW9uLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJvcHRpb24uY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ2hhbmdlRGV0ZWN0b3JSZWYsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0LCBOZ1pvbmUsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgU3ViamVjdCB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTmJCb29sZWFuSW5wdXQgfSBmcm9tICcuLi9oZWxwZXJzJztcbmltcG9ydCB7IE5iRm9jdXNhYmxlT3B0aW9uIH0gZnJvbSAnLi4vY2RrL2ExMXkvZm9jdXMta2V5LW1hbmFnZXInO1xuaW1wb3J0IHsgTmJIaWdobGlnaHRhYmxlT3B0aW9uIH0gZnJvbSAnLi4vY2RrL2ExMXkvZGVzY2VuZGFudC1rZXktbWFuYWdlcic7XG5pbXBvcnQgeyBOYlNlbGVjdENvbXBvbmVudCB9IGZyb20gJy4uL3NlbGVjdC9zZWxlY3QuY29tcG9uZW50Jztcbi8qKlxuICogTmJPcHRpb25Db21wb25lbnRcbiAqXG4gKiBAc3R5bGVzXG4gKlxuICogb3B0aW9uLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24tdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi10ZXh0LWZvbnQtZmFtaWx5OlxuICogb3B0aW9uLWhvdmVyLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24taG92ZXItdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi1hY3RpdmUtYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi1hY3RpdmUtdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi1mb2N1cy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLWZvY3VzLXRleHQtY29sb3I6XG4gKiBvcHRpb24tc2VsZWN0ZWQtYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi1zZWxlY3RlZC10ZXh0LWNvbG9yOlxuICogb3B0aW9uLXNlbGVjdGVkLWhvdmVyLWJhY2tncm91bmQtY29sb3I6XG4gKiBvcHRpb24tc2VsZWN0ZWQtaG92ZXItdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi1zZWxlY3RlZC1hY3RpdmUtYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi1zZWxlY3RlZC1hY3RpdmUtdGV4dC1jb2xvcjpcbiAqIG9wdGlvbi1zZWxlY3RlZC1mb2N1cy1iYWNrZ3JvdW5kLWNvbG9yOlxuICogb3B0aW9uLXNlbGVjdGVkLWZvY3VzLXRleHQtY29sb3I6XG4gKiBvcHRpb24tZGlzYWJsZWQtYmFja2dyb3VuZC1jb2xvcjpcbiAqIG9wdGlvbi1kaXNhYmxlZC10ZXh0LWNvbG9yOlxuICogb3B0aW9uLXRpbnktdGV4dC1mb250LXNpemU6XG4gKiBvcHRpb24tdGlueS10ZXh0LWZvbnQtd2VpZ2h0OlxuICogb3B0aW9uLXRpbnktdGV4dC1saW5lLWhlaWdodDpcbiAqIG9wdGlvbi10aW55LXBhZGRpbmc6XG4gKiBvcHRpb24tc21hbGwtdGV4dC1mb250LXNpemU6XG4gKiBvcHRpb24tc21hbGwtdGV4dC1mb250LXdlaWdodDpcbiAqIG9wdGlvbi1zbWFsbC10ZXh0LWxpbmUtaGVpZ2h0OlxuICogb3B0aW9uLXNtYWxsLXBhZGRpbmc6XG4gKiBvcHRpb24tbWVkaXVtLXRleHQtZm9udC1zaXplOlxuICogb3B0aW9uLW1lZGl1bS10ZXh0LWZvbnQtd2VpZ2h0OlxuICogb3B0aW9uLW1lZGl1bS10ZXh0LWxpbmUtaGVpZ2h0OlxuICogb3B0aW9uLW1lZGl1bS1wYWRkaW5nOlxuICogb3B0aW9uLWxhcmdlLXRleHQtZm9udC1zaXplOlxuICogb3B0aW9uLWxhcmdlLXRleHQtZm9udC13ZWlnaHQ6XG4gKiBvcHRpb24tbGFyZ2UtdGV4dC1saW5lLWhlaWdodDpcbiAqIG9wdGlvbi1sYXJnZS1wYWRkaW5nOlxuICogb3B0aW9uLWdpYW50LXRleHQtZm9udC1zaXplOlxuICogb3B0aW9uLWdpYW50LXRleHQtZm9udC13ZWlnaHQ6XG4gKiBvcHRpb24tZ2lhbnQtdGV4dC1saW5lLWhlaWdodDpcbiAqIG9wdGlvbi1naWFudC1wYWRkaW5nOlxuICoqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTmJPcHRpb25Db21wb25lbnQ8VCA9IGFueT4gaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE5iRm9jdXNhYmxlT3B0aW9uLCBOYkhpZ2hsaWdodGFibGVPcHRpb24ge1xuICAgIHByb3RlY3RlZCBlbGVtZW50UmVmOiBFbGVtZW50UmVmO1xuICAgIHByb3RlY3RlZCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWY7XG4gICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZTtcbiAgICBwcm90ZWN0ZWQgcmVuZGVyZXI6IFJlbmRlcmVyMjtcbiAgICBwcm90ZWN0ZWQgZGlzYWJsZWRCeUdyb3VwOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIE9wdGlvbiB2YWx1ZSB0aGF0IHdpbGwgYmUgZmlyZWQgb24gc2VsZWN0aW9uLlxuICAgICAqICovXG4gICAgdmFsdWU6IFQ7XG4gICAgZ2V0IGRpc2FibGVkKCk6IGJvb2xlYW47XG4gICAgc2V0IGRpc2FibGVkKHZhbHVlOiBib29sZWFuKTtcbiAgICBwcm90ZWN0ZWQgX2Rpc2FibGVkOiBib29sZWFuO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9kaXNhYmxlZDogTmJCb29sZWFuSW5wdXQ7XG4gICAgLyoqXG4gICAgICogRmlyZXMgdmFsdWUgd2hlbiBvcHRpb24gc2VsZWN0aW9uIGNoYW5nZS5cbiAgICAgKiAqL1xuICAgIHNlbGVjdGlvbkNoYW5nZTogRXZlbnRFbWl0dGVyPE5iT3B0aW9uQ29tcG9uZW50PFQ+PjtcbiAgICAvKipcbiAgICAgKiBGaXJlcyB3aGVuIG9wdGlvbiBjbGlja2VkXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGNsaWNrJDogU3ViamVjdDxOYk9wdGlvbkNvbXBvbmVudDxUPj47XG4gICAgZ2V0IGNsaWNrKCk6IE9ic2VydmFibGU8TmJPcHRpb25Db21wb25lbnQ8VD4+O1xuICAgIHNlbGVjdGVkOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBwYXJlbnQ6IE5iU2VsZWN0Q29tcG9uZW50O1xuICAgIHByb3RlY3RlZCBhbGl2ZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiBDb21wb25lbnQgc2NvcGVkIGlkIGZvciBhcmlhIGF0dHJpYnV0ZXMuXG4gICAgICogKi9cbiAgICBpZDogc3RyaW5nO1xuICAgIGNvbnN0cnVjdG9yKHBhcmVudDogYW55LCBlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYsIHpvbmU6IE5nWm9uZSwgcmVuZGVyZXI6IFJlbmRlcmVyMik7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ0FmdGVyVmlld0luaXQoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHNob3VsZCB3ZSByZW5kZXIgY2hlY2tib3guXG4gICAgICogKi9cbiAgICBnZXQgd2l0aENoZWNrYm94KCk6IGJvb2xlYW47XG4gICAgZ2V0IGNvbnRlbnQoKTogYW55O1xuICAgIGdldCBtdWx0aXBsZSgpOiBib29sZWFuO1xuICAgIGdldCBzZWxlY3RlZENsYXNzKCk6IGJvb2xlYW47XG4gICAgZ2V0IGRpc2FibGVkQXR0cmlidXRlKCk6ICcnIHwgbnVsbDtcbiAgICBnZXQgdGFiaW5kZXgoKTogc3RyaW5nO1xuICAgIGdldCBhY3RpdmVDbGFzcygpOiBib29sZWFuO1xuICAgIHByb3RlY3RlZCBfYWN0aXZlOiBib29sZWFuO1xuICAgIG9uQ2xpY2soZXZlbnQ6IGFueSk6IHZvaWQ7XG4gICAgc2VsZWN0KCk6IHZvaWQ7XG4gICAgZGVzZWxlY3QoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBTZXRzIGRpc2FibGVkIGJ5IGdyb3VwIHN0YXRlIGFuZCBtYXJrcyBjb21wb25lbnQgZm9yIGNoZWNrLlxuICAgICAqL1xuICAgIHNldERpc2FibGVkQnlHcm91cFN0YXRlKGRpc2FibGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBwcm90ZWN0ZWQgc2V0U2VsZWN0aW9uKHNlbGVjdGVkOiBib29sZWFuKTogdm9pZDtcbiAgICBmb2N1cygpOiB2b2lkO1xuICAgIGdldExhYmVsKCk6IHN0cmluZztcbiAgICBzZXRBY3RpdmVTdHlsZXMoKTogdm9pZDtcbiAgICBzZXRJbmFjdGl2ZVN0eWxlcygpOiB2b2lkO1xufVxuIl19