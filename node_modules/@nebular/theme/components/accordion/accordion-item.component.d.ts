/**
 * @license
 * Copyright Akveo. All Rights Reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 */
import { ChangeDetectorRef, EventEmitter, SimpleChanges, OnInit, OnChanges, OnDestroy } from '@angular/core';
import { Subject } from 'rxjs';
import { NbAccordionComponent } from './accordion.component';
import { NbBooleanInput } from '../helpers';
/**
 * Component intended to be used within `<nb-accordion>` component
 */
import * as ɵngcc0 from '@angular/core';
export declare class NbAccordionItemComponent implements OnInit, OnChanges, OnDestroy {
    private accordion;
    private cd;
    /**
     * Item is collapse (`true` by default)
     * @type {boolean}
     */
    get collapsed(): boolean;
    set collapsed(val: boolean);
    static ngAcceptInputType_collapsed: NbBooleanInput;
    /**
     * Item is expanded (`false` by default)
     * @type {boolean}
     */
    get expanded(): boolean;
    set expanded(val: boolean);
    static ngAcceptInputType_expanded: NbBooleanInput;
    /**
     * Item is disabled and cannot be opened.
     * @type {boolean}
     */
    get disabled(): boolean;
    set disabled(val: boolean);
    static ngAcceptInputType_disabled: NbBooleanInput;
    /**
     * Emits whenever the expanded state of the accordion changes.
     * Primarily used to facilitate two-way binding.
     */
    collapsedChange: EventEmitter<boolean>;
    accordionItemInvalidate: Subject<boolean>;
    private collapsedValue;
    private disabledValue;
    private destroy$;
    constructor(accordion: NbAccordionComponent, cd: ChangeDetectorRef);
    /**
     * Open/close the item
     */
    toggle(): void;
    /**
     * Open the item.
     */
    open(): void;
    /**
     * Collapse the item.
     */
    close(): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    private invalidate;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<NbAccordionItemComponent, [{ host: true; }, null]>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<NbAccordionItemComponent, "nb-accordion-item", never, { "collapsed": "collapsed"; "expanded": "expanded"; "disabled": "disabled"; }, { "collapsedChange": "collapsedChange"; }, never, ["nb-accordion-item-header", "nb-accordion-item-body"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjb3JkaW9uLWl0ZW0uY29tcG9uZW50LmQudHMiLCJzb3VyY2VzIjpbImFjY29yZGlvbi1pdGVtLmNvbXBvbmVudC5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXG4gKi9cbmltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIE9uSW5pdCwgT25DaGFuZ2VzLCBPbkRlc3Ryb3kgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IE5iQWNjb3JkaW9uQ29tcG9uZW50IH0gZnJvbSAnLi9hY2NvcmRpb24uY29tcG9uZW50JztcbmltcG9ydCB7IE5iQm9vbGVhbklucHV0IH0gZnJvbSAnLi4vaGVscGVycyc7XG4vKipcbiAqIENvbXBvbmVudCBpbnRlbmRlZCB0byBiZSB1c2VkIHdpdGhpbiBgPG5iLWFjY29yZGlvbj5gIGNvbXBvbmVudFxuICovXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOYkFjY29yZGlvbkl0ZW1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcywgT25EZXN0cm95IHtcbiAgICBwcml2YXRlIGFjY29yZGlvbjtcbiAgICBwcml2YXRlIGNkO1xuICAgIC8qKlxuICAgICAqIEl0ZW0gaXMgY29sbGFwc2UgKGB0cnVlYCBieSBkZWZhdWx0KVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGdldCBjb2xsYXBzZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgY29sbGFwc2VkKHZhbDogYm9vbGVhbik7XG4gICAgc3RhdGljIG5nQWNjZXB0SW5wdXRUeXBlX2NvbGxhcHNlZDogTmJCb29sZWFuSW5wdXQ7XG4gICAgLyoqXG4gICAgICogSXRlbSBpcyBleHBhbmRlZCAoYGZhbHNlYCBieSBkZWZhdWx0KVxuICAgICAqIEB0eXBlIHtib29sZWFufVxuICAgICAqL1xuICAgIGdldCBleHBhbmRlZCgpOiBib29sZWFuO1xuICAgIHNldCBleHBhbmRlZCh2YWw6IGJvb2xlYW4pO1xuICAgIHN0YXRpYyBuZ0FjY2VwdElucHV0VHlwZV9leHBhbmRlZDogTmJCb29sZWFuSW5wdXQ7XG4gICAgLyoqXG4gICAgICogSXRlbSBpcyBkaXNhYmxlZCBhbmQgY2Fubm90IGJlIG9wZW5lZC5cbiAgICAgKiBAdHlwZSB7Ym9vbGVhbn1cbiAgICAgKi9cbiAgICBnZXQgZGlzYWJsZWQoKTogYm9vbGVhbjtcbiAgICBzZXQgZGlzYWJsZWQodmFsOiBib29sZWFuKTtcbiAgICBzdGF0aWMgbmdBY2NlcHRJbnB1dFR5cGVfZGlzYWJsZWQ6IE5iQm9vbGVhbklucHV0O1xuICAgIC8qKlxuICAgICAqIEVtaXRzIHdoZW5ldmVyIHRoZSBleHBhbmRlZCBzdGF0ZSBvZiB0aGUgYWNjb3JkaW9uIGNoYW5nZXMuXG4gICAgICogUHJpbWFyaWx5IHVzZWQgdG8gZmFjaWxpdGF0ZSB0d28td2F5IGJpbmRpbmcuXG4gICAgICovXG4gICAgY29sbGFwc2VkQ2hhbmdlOiBFdmVudEVtaXR0ZXI8Ym9vbGVhbj47XG4gICAgYWNjb3JkaW9uSXRlbUludmFsaWRhdGU6IFN1YmplY3Q8Ym9vbGVhbj47XG4gICAgcHJpdmF0ZSBjb2xsYXBzZWRWYWx1ZTtcbiAgICBwcml2YXRlIGRpc2FibGVkVmFsdWU7XG4gICAgcHJpdmF0ZSBkZXN0cm95JDtcbiAgICBjb25zdHJ1Y3RvcihhY2NvcmRpb246IE5iQWNjb3JkaW9uQ29tcG9uZW50LCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIC8qKlxuICAgICAqIE9wZW4vY2xvc2UgdGhlIGl0ZW1cbiAgICAgKi9cbiAgICB0b2dnbGUoKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBPcGVuIHRoZSBpdGVtLlxuICAgICAqL1xuICAgIG9wZW4oKTogdm9pZDtcbiAgICAvKipcbiAgICAgKiBDb2xsYXBzZSB0aGUgaXRlbS5cbiAgICAgKi9cbiAgICBjbG9zZSgpOiB2b2lkO1xuICAgIG5nT25Jbml0KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBwcml2YXRlIGludmFsaWRhdGU7XG59XG4iXX0=