{"version":3,"file":"option-group.component.js","sourceRoot":"","sources":["../../../../../../.ng_build/theme/components/option/option-group.component.ts"],"names":[],"mappings":"AAAA;;;;GAIG;;AAEH,OAAO,EAEL,uBAAuB,EACvB,SAAS,EACT,eAAe,EACf,WAAW,EACX,KAAK,EAEL,SAAS,GACV,MAAM,eAAe,CAAC;AACvB,OAAO,EAAE,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAE/B,OAAO,EAAE,qBAAqB,EAAkB,MAAM,YAAY,CAAC;AACnE,OAAO,EAAE,iBAAiB,EAAE,MAAM,oBAAoB,CAAC;AAEvD;;;;;;;;;;;IAWI;AAUJ,IAAa,sBAAsB,GAAnC,MAAa,sBAAsB;IAAnC;QAEY,aAAQ,GAAG,IAAI,OAAO,EAAQ,CAAC;QAe/B,cAAS,GAAY,KAAK,CAAC;IAwCvC,CAAC;IAlDC,IAAI,QAAQ;QACV,OAAO,IAAI,CAAC,SAAS,CAAC;IACxB,CAAC;IACD,IAAI,QAAQ,CAAC,KAAc;QACzB,IAAI,CAAC,SAAS,GAAG,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAE9C,IAAI,IAAI,CAAC,OAAO,EAAE;YAChB,IAAI,CAAC,0BAA0B,EAAE,CAAC;SACnC;IACH,CAAC;IAKD,IAAI,iBAAiB;QACnB,OAAO,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACnC,CAAC;IAID,kBAAkB;QAChB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;YACvB,IAAI,CAAC,+BAA+B,EAAE,CAAC;SACxC;QAED,IAAI,CAAC,OAAO,CAAC,OAAO;aACjB,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;aAC9B,SAAS,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,+BAA+B,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,WAAW;QACT,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC;IAC3B,CAAC;IAED;;OAEG;IACO,0BAA0B;QAClC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,MAA8B,EAAE,EAAE,CAAC,MAAM,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC1G,CAAC;IAED;;;;OAIG;IACO,+BAA+B;QACvC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,0BAA0B,EAAE,CAAC,CAAC;IAClE,CAAC;CACF,CAAA;AArDU;IAAR,KAAK,EAAE;;qDAAe;AAGvB;IADC,KAAK,EAAE;;;sDAGP;AAYD;IADC,WAAW,CAAC,eAAe,CAAC;;;+DAG5B;AAE0D;IAA1D,eAAe,CAAC,iBAAiB,EAAE,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC;8BAAU,SAAS;uDAAyB;AAzB3F,sBAAsB;IATlC,SAAS,CAAC;QACT,QAAQ,EAAE,iBAAiB;QAE3B,eAAe,EAAE,uBAAuB,CAAC,MAAM;QAC/C,QAAQ,EAAE;;;GAGT;;KACF,CAAC;GACW,sBAAsB,CAyDlC;SAzDY,sBAAsB","sourcesContent":["/*\n * @license\n * Copyright Akveo. All Rights Reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n */\n\nimport {\n  AfterContentInit,\n  ChangeDetectionStrategy,\n  Component,\n  ContentChildren,\n  HostBinding,\n  Input,\n  OnDestroy,\n  QueryList,\n} from '@angular/core';\nimport { takeUntil } from 'rxjs/operators';\nimport { Subject } from 'rxjs';\n\nimport { convertToBoolProperty, NbBooleanInput } from '../helpers';\nimport { NbOptionComponent } from './option.component';\n\n/**\n * NbOptionGroupComponent\n *\n * @styles\n *\n * option-group-text-color:\n * option-group-tiny-start-padding:\n * option-group-small-start-padding:\n * option-group-medium-start-padding:\n * option-group-large-start-padding:\n * option-group-giant-start-padding:\n **/\n@Component({\n  selector: 'nb-option-group',\n  styleUrls: ['./option-group.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  template: `\n    <span class=\"option-group-title\">{{ title }}</span>\n    <ng-content select=\"nb-option, ng-container\"></ng-content>\n  `,\n})\nexport class NbOptionGroupComponent implements AfterContentInit, OnDestroy {\n\n  protected destroy$ = new Subject<void>();\n\n  @Input() title: string;\n\n  @Input()\n  get disabled(): boolean {\n    return this._disabled;\n  }\n  set disabled(value: boolean) {\n    this._disabled = convertToBoolProperty(value);\n\n    if (this.options) {\n      this.updateOptionsDisabledState();\n    }\n  }\n  protected _disabled: boolean = false;\n  static ngAcceptInputType_disabled: NbBooleanInput;\n\n  @HostBinding('attr.disabled')\n  get disabledAttribute(): '' | null {\n    return this.disabled ? '' : null;\n  }\n\n  @ContentChildren(NbOptionComponent, { descendants: true }) options: QueryList<NbOptionComponent<any>>;\n\n  ngAfterContentInit() {\n    if (this.options.length) {\n      this.asyncUpdateOptionsDisabledState();\n    }\n\n    this.options.changes\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => this.asyncUpdateOptionsDisabledState());\n  }\n\n  ngOnDestroy() {\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  /**\n   * Sets disabled state for each option to current group disabled state.\n   */\n  protected updateOptionsDisabledState(): void {\n    this.options.forEach((option: NbOptionComponent<any>) => option.setDisabledByGroupState(this.disabled));\n  }\n\n  /**\n   * Updates options disabled state after promise resolution.\n   * This way change detection will be triggered after options state updated.\n   * Use this method when updating options during change detection run (e.g. QueryList.changes, lifecycle hooks).\n   */\n  protected asyncUpdateOptionsDisabledState(): void {\n    Promise.resolve().then(() => this.updateOptionsDisabledState());\n  }\n}\n\n\n"]}